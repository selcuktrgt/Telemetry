
telemeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e90  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005040  08005040  00015040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005118  08005118  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08005118  08005118  00015118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005120  08005120  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005120  08005120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000180  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000200  20000200  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f377  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002190  00000000  00000000  0002f427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  000315b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ca0  00000000  00000000  00032318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242e2  00000000  00000000  00032fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fe1f  00000000  00000000  0005729a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7a09  00000000  00000000  000670b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013eac2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ee4  00000000  00000000  0013eb14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005028 	.word	0x08005028

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08005028 	.word	0x08005028

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800059e:	4a38      	ldr	r2, [pc, #224]	; (8000680 <HD44780_Init+0xec>)
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80005a4:	4b37      	ldr	r3, [pc, #220]	; (8000684 <HD44780_Init+0xf0>)
 80005a6:	2208      	movs	r2, #8
 80005a8:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80005aa:	4b37      	ldr	r3, [pc, #220]	; (8000688 <HD44780_Init+0xf4>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80005b0:	4b33      	ldr	r3, [pc, #204]	; (8000680 <HD44780_Init+0xec>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d907      	bls.n	80005c8 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80005b8:	4b33      	ldr	r3, [pc, #204]	; (8000688 <HD44780_Init+0xf4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	f043 0308 	orr.w	r3, r3, #8
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4b31      	ldr	r3, [pc, #196]	; (8000688 <HD44780_Init+0xf4>)
 80005c4:	701a      	strb	r2, [r3, #0]
 80005c6:	e006      	b.n	80005d6 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80005c8:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <HD44780_Init+0xf4>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b2d      	ldr	r3, [pc, #180]	; (8000688 <HD44780_Init+0xf4>)
 80005d4:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80005d6:	f000 f985 	bl	80008e4 <DelayInit>
  HAL_Delay(50);
 80005da:	2032      	movs	r0, #50	; 0x32
 80005dc:	f000 feac 	bl	8001338 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80005e0:	4b28      	ldr	r3, [pc, #160]	; (8000684 <HD44780_Init+0xf0>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f943 	bl	8000870 <ExpanderWrite>
  HAL_Delay(1000);
 80005ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ee:	f000 fea3 	bl	8001338 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80005f2:	2030      	movs	r0, #48	; 0x30
 80005f4:	f000 f92b 	bl	800084e <Write4Bits>
  DelayUS(4500);
 80005f8:	f241 1094 	movw	r0, #4500	; 0x1194
 80005fc:	f000 f99c 	bl	8000938 <DelayUS>

  Write4Bits(0x03 << 4);
 8000600:	2030      	movs	r0, #48	; 0x30
 8000602:	f000 f924 	bl	800084e <Write4Bits>
  DelayUS(4500);
 8000606:	f241 1094 	movw	r0, #4500	; 0x1194
 800060a:	f000 f995 	bl	8000938 <DelayUS>

  Write4Bits(0x03 << 4);
 800060e:	2030      	movs	r0, #48	; 0x30
 8000610:	f000 f91d 	bl	800084e <Write4Bits>
  DelayUS(4500);
 8000614:	f241 1094 	movw	r0, #4500	; 0x1194
 8000618:	f000 f98e 	bl	8000938 <DelayUS>

  Write4Bits(0x02 << 4);
 800061c:	2020      	movs	r0, #32
 800061e:	f000 f916 	bl	800084e <Write4Bits>
  DelayUS(100);
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f000 f988 	bl	8000938 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <HD44780_Init+0xf4>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	f043 0320 	orr.w	r3, r3, #32
 8000630:	b2db      	uxtb	r3, r3
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f8ce 	bl	80007d4 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <HD44780_Init+0xf8>)
 800063a:	2204      	movs	r2, #4
 800063c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800063e:	f000 f875 	bl	800072c <HD44780_Display>
  HD44780_Clear();
 8000642:	f000 f82b 	bl	800069c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HD44780_Init+0xfc>)
 8000648:	2202      	movs	r2, #2
 800064a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <HD44780_Init+0xfc>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	b2db      	uxtb	r3, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f000 f8bc 	bl	80007d4 <SendCommand>
  DelayUS(4500);
 800065c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000660:	f000 f96a 	bl	8000938 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000664:	490b      	ldr	r1, [pc, #44]	; (8000694 <HD44780_Init+0x100>)
 8000666:	2000      	movs	r0, #0
 8000668:	f000 f876 	bl	8000758 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800066c:	490a      	ldr	r1, [pc, #40]	; (8000698 <HD44780_Init+0x104>)
 800066e:	2001      	movs	r0, #1
 8000670:	f000 f872 	bl	8000758 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000674:	f000 f81d 	bl	80006b2 <HD44780_Home>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	2000009f 	.word	0x2000009f
 8000684:	200000a0 	.word	0x200000a0
 8000688:	2000009c 	.word	0x2000009c
 800068c:	2000009d 	.word	0x2000009d
 8000690:	2000009e 	.word	0x2000009e
 8000694:	20000000 	.word	0x20000000
 8000698:	20000008 	.word	0x20000008

0800069c <HD44780_Clear>:

void HD44780_Clear()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80006a0:	2001      	movs	r0, #1
 80006a2:	f000 f897 	bl	80007d4 <SendCommand>
  DelayUS(2000);
 80006a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006aa:	f000 f945 	bl	8000938 <DelayUS>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <HD44780_Home>:

void HD44780_Home()
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80006b6:	2002      	movs	r0, #2
 80006b8:	f000 f88c 	bl	80007d4 <SendCommand>
  DelayUS(2000);
 80006bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006c0:	f000 f93a 	bl	8000938 <DelayUS>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b087      	sub	sp, #28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	460a      	mov	r2, r1
 80006d2:	71fb      	strb	r3, [r7, #7]
 80006d4:	4613      	mov	r3, r2
 80006d6:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HD44780_SetCursor+0x5c>)
 80006da:	f107 0408 	add.w	r4, r7, #8
 80006de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <HD44780_SetCursor+0x60>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	79ba      	ldrb	r2, [r7, #6]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d303      	bcc.n	80006f6 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <HD44780_SetCursor+0x60>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80006f6:	79bb      	ldrb	r3, [r7, #6]
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	3318      	adds	r3, #24
 80006fc:	443b      	add	r3, r7
 80006fe:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000702:	b2da      	uxtb	r2, r3
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	4413      	add	r3, r2
 8000708:	b2db      	uxtb	r3, r3
 800070a:	b25b      	sxtb	r3, r3
 800070c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000710:	b25b      	sxtb	r3, r3
 8000712:	b2db      	uxtb	r3, r3
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f85d 	bl	80007d4 <SendCommand>
}
 800071a:	bf00      	nop
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd90      	pop	{r4, r7, pc}
 8000722:	bf00      	nop
 8000724:	08005040 	.word	0x08005040
 8000728:	2000009f 	.word	0x2000009f

0800072c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <HD44780_Display+0x28>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HD44780_Display+0x28>)
 800073c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800073e:	4b05      	ldr	r3, [pc, #20]	; (8000754 <HD44780_Display+0x28>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	f043 0308 	orr.w	r3, r3, #8
 8000746:	b2db      	uxtb	r3, r3
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f843 	bl	80007d4 <SendCommand>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000009d 	.word	0x2000009d

08000758 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	b25b      	sxtb	r3, r3
 8000772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000776:	b25b      	sxtb	r3, r3
 8000778:	b2db      	uxtb	r3, r3
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f82a 	bl	80007d4 <SendCommand>
  for (int i=0; i<8; i++)
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	e009      	b.n	800079a <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	4413      	add	r3, r2
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f82e 	bl	80007f0 <SendChar>
  for (int i=0; i<8; i++)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3301      	adds	r3, #1
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2b07      	cmp	r3, #7
 800079e:	ddf2      	ble.n	8000786 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80007b2:	e006      	b.n	80007c2 <HD44780_PrintStr+0x18>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f817 	bl	80007f0 <SendChar>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f4      	bne.n	80007b4 <HD44780_PrintStr+0xa>
}
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f812 	bl	800080c <Send>
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <SendChar>:

static void SendChar(uint8_t ch)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2101      	movs	r1, #1
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f804 	bl	800080c <Send>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	460a      	mov	r2, r1
 8000816:	71fb      	strb	r3, [r7, #7]
 8000818:	4613      	mov	r3, r2
 800081a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	f023 030f 	bic.w	r3, r3, #15
 8000822:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	011b      	lsls	r3, r3, #4
 8000828:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800082a:	7bfa      	ldrb	r2, [r7, #15]
 800082c:	79bb      	ldrb	r3, [r7, #6]
 800082e:	4313      	orrs	r3, r2
 8000830:	b2db      	uxtb	r3, r3
 8000832:	4618      	mov	r0, r3
 8000834:	f000 f80b 	bl	800084e <Write4Bits>
  Write4Bits((lownib)|mode);
 8000838:	7bba      	ldrb	r2, [r7, #14]
 800083a:	79bb      	ldrb	r3, [r7, #6]
 800083c:	4313      	orrs	r3, r2
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4618      	mov	r0, r3
 8000842:	f000 f804 	bl	800084e <Write4Bits>
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	4618      	mov	r0, r3
 800085c:	f000 f808 	bl	8000870 <ExpanderWrite>
  PulseEnable(value);
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	4618      	mov	r0, r3
 8000864:	f000 f820 	bl	80008a8 <PulseEnable>
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af02      	add	r7, sp, #8
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <ExpanderWrite+0x30>)
 800087c:	781a      	ldrb	r2, [r3, #0]
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	4313      	orrs	r3, r2
 8000882:	b2db      	uxtb	r3, r3
 8000884:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000886:	f107 020f 	add.w	r2, r7, #15
 800088a:	230a      	movs	r3, #10
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	2301      	movs	r3, #1
 8000890:	214e      	movs	r1, #78	; 0x4e
 8000892:	4804      	ldr	r0, [pc, #16]	; (80008a4 <ExpanderWrite+0x34>)
 8000894:	f001 fa22 	bl	8001cdc <HAL_I2C_Master_Transmit>
}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000a0 	.word	0x200000a0
 80008a4:	200000a4 	.word	0x200000a4

080008a8 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ffd8 	bl	8000870 <ExpanderWrite>
  DelayUS(20);
 80008c0:	2014      	movs	r0, #20
 80008c2:	f000 f839 	bl	8000938 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	f023 0304 	bic.w	r3, r3, #4
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ffce 	bl	8000870 <ExpanderWrite>
  DelayUS(20);
 80008d4:	2014      	movs	r0, #20
 80008d6:	f000 f82f 	bl	8000938 <DelayUS>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <DelayInit>:

static void DelayInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <DelayInit+0x4c>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	4a10      	ldr	r2, [pc, #64]	; (8000930 <DelayInit+0x4c>)
 80008ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80008f2:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <DelayInit+0x4c>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <DelayInit+0x4c>)
 80008fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008fe:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <DelayInit+0x50>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <DelayInit+0x50>)
 8000906:	f023 0301 	bic.w	r3, r3, #1
 800090a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <DelayInit+0x50>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a08      	ldr	r2, [pc, #32]	; (8000934 <DelayInit+0x50>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <DelayInit+0x50>)
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800091e:	bf00      	nop
  __ASM volatile ("NOP");
 8000920:	bf00      	nop
  __ASM volatile ("NOP");
 8000922:	bf00      	nop
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000edf0 	.word	0xe000edf0
 8000934:	e0001000 	.word	0xe0001000

08000938 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <DelayUS+0x44>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <DelayUS+0x48>)
 8000946:	fba2 2303 	umull	r2, r3, r2, r3
 800094a:	0c9a      	lsrs	r2, r3, #18
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	fb02 f303 	mul.w	r3, r2, r3
 8000952:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <DelayUS+0x4c>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <DelayUS+0x4c>)
 800095c:	685a      	ldr	r2, [r3, #4]
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	697a      	ldr	r2, [r7, #20]
 8000968:	429a      	cmp	r2, r3
 800096a:	d8f6      	bhi.n	800095a <DelayUS+0x22>
}
 800096c:	bf00      	nop
 800096e:	bf00      	nop
 8000970:	371c      	adds	r7, #28
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000010 	.word	0x20000010
 8000980:	431bde83 	.word	0x431bde83
 8000984:	e0001000 	.word	0xe0001000

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098e:	f000 fc61 	bl	8001254 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000992:	f000 f873 	bl	8000a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000996:	f000 f9a5 	bl	8000ce4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800099a:	f000 f94f 	bl	8000c3c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800099e:	f000 f8d7 	bl	8000b50 <MX_I2C1_Init>
  MX_SPI1_Init();
 80009a2:	f000 f915 	bl	8000bd0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80009a6:	f000 f973 	bl	8000c90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HD44780_Init(2);
 80009aa:	2002      	movs	r0, #2
 80009ac:	f7ff fdf2 	bl	8000594 <HD44780_Init>
  HD44780_Clear();
 80009b0:	f7ff fe74 	bl	800069c <HD44780_Clear>

  data[0]=0;
 80009b4:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <main+0xdc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
  data[1]=63;
 80009ba:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <main+0xdc>)
 80009bc:	223f      	movs	r2, #63	; 0x3f
 80009be:	705a      	strb	r2, [r3, #1]
  data[2]=23;
 80009c0:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <main+0xdc>)
 80009c2:	2217      	movs	r2, #23
 80009c4:	709a      	strb	r2, [r3, #2]

  int c;
  int d;
  char get_data2[]="";
 80009c6:	2300      	movs	r3, #0
 80009c8:	703b      	strb	r3, [r7, #0]

  int a=10;
 80009ca:	230a      	movs	r3, #10
 80009cc:	607b      	str	r3, [r7, #4]
  char char_value=a+"0";
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a25      	ldr	r2, [pc, #148]	; (8000a68 <main+0xe0>)
 80009d2:	4413      	add	r3, r2
 80009d4:	70fb      	strb	r3, [r7, #3]
  printf("char değeri: %c",char_value);
 80009d6:	78fb      	ldrb	r3, [r7, #3]
 80009d8:	4619      	mov	r1, r3
 80009da:	4824      	ldr	r0, [pc, #144]	; (8000a6c <main+0xe4>)
 80009dc:	f003 fb96 	bl	800410c <iprintf>
	   	data[3]=(char)i;
	   	HAL_UART_Transmit(&huart1,data,4,100);
	   	HAL_Delay(100);
*/

	    HAL_UART_Receive(&huart2,get_data,4,100);
 80009e0:	2364      	movs	r3, #100	; 0x64
 80009e2:	2204      	movs	r2, #4
 80009e4:	4922      	ldr	r1, [pc, #136]	; (8000a70 <main+0xe8>)
 80009e6:	4823      	ldr	r0, [pc, #140]	; (8000a74 <main+0xec>)
 80009e8:	f002 fb87 	bl	80030fa <HAL_UART_Receive>


	      if(get_data[0]<100 && get_data[0]>=10){
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <main+0xe8>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b63      	cmp	r3, #99	; 0x63
 80009f2:	d816      	bhi.n	8000a22 <main+0x9a>
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <main+0xe8>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b09      	cmp	r3, #9
 80009fa:	d912      	bls.n	8000a22 <main+0x9a>
	      	  c= get_data[0]/10;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <main+0xe8>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <main+0xf0>)
 8000a02:	fba2 2303 	umull	r2, r3, r2, r3
 8000a06:	08db      	lsrs	r3, r3, #3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	60fb      	str	r3, [r7, #12]
	      	  d=get_data[0]-c*10;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <main+0xe8>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4619      	mov	r1, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f06f 0209 	mvn.w	r2, #9
 8000a18:	fb02 f303 	mul.w	r3, r2, r3
 8000a1c:	440b      	add	r3, r1
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	e006      	b.n	8000a30 <main+0xa8>
	        }
	      else if(get_data[0]<10) {
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <main+0xe8>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b09      	cmp	r3, #9
 8000a28:	d802      	bhi.n	8000a30 <main+0xa8>
	    	  d=get_data[0];
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <main+0xe8>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	60bb      	str	r3, [r7, #8]
	      }


		      get_data2[0]=c+'0';
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	3330      	adds	r3, #48	; 0x30
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	703b      	strb	r3, [r7, #0]
		      get_data2[1]=d+'0';
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	3330      	adds	r3, #48	; 0x30
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	707b      	strb	r3, [r7, #1]





	    HD44780_SetCursor(0,0);
 8000a44:	2100      	movs	r1, #0
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff fe3e 	bl	80006c8 <HD44780_SetCursor>
	    HD44780_PrintStr(get_data2);
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff feab 	bl	80007aa <HD44780_PrintStr>

	    HD44780_SetCursor(10,1);
 8000a54:	2101      	movs	r1, #1
 8000a56:	200a      	movs	r0, #10
 8000a58:	f7ff fe36 	bl	80006c8 <HD44780_SetCursor>
 	    HAL_Delay(100);
 8000a5c:	2064      	movs	r0, #100	; 0x64
 8000a5e:	f000 fc6b 	bl	8001338 <HAL_Delay>
	    HAL_UART_Receive(&huart2,get_data,4,100);
 8000a62:	e7bd      	b.n	80009e0 <main+0x58>
 8000a64:	200001d8 	.word	0x200001d8
 8000a68:	08005050 	.word	0x08005050
 8000a6c:	08005054 	.word	0x08005054
 8000a70:	200001e4 	.word	0x200001e4
 8000a74:	20000194 	.word	0x20000194
 8000a78:	cccccccd 	.word	0xcccccccd

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b094      	sub	sp, #80	; 0x50
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	2230      	movs	r2, #48	; 0x30
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f003 fb36 	bl	80040fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <SystemClock_Config+0xcc>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	4a27      	ldr	r2, [pc, #156]	; (8000b48 <SystemClock_Config+0xcc>)
 8000aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aae:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab0:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <SystemClock_Config+0xcc>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <SystemClock_Config+0xd0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ac8:	4a20      	ldr	r2, [pc, #128]	; (8000b4c <SystemClock_Config+0xd0>)
 8000aca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <SystemClock_Config+0xd0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000adc:	2301      	movs	r3, #1
 8000ade:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000af0:	2304      	movs	r3, #4
 8000af2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000af4:	2348      	movs	r3, #72	; 0x48
 8000af6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af8:	2302      	movs	r3, #2
 8000afa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000afc:	2303      	movs	r3, #3
 8000afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 fc6b 	bl	80023e0 <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b10:	f000 f938 	bl	8000d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b14:	230f      	movs	r3, #15
 8000b16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	2102      	movs	r1, #2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f001 fecd 	bl	80028d0 <HAL_RCC_ClockConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b3c:	f000 f922 	bl	8000d84 <Error_Handler>
  }
}
 8000b40:	bf00      	nop
 8000b42:	3750      	adds	r7, #80	; 0x50
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40007000 	.word	0x40007000

08000b50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b56:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <MX_I2C1_Init+0x78>)
 8000b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <MX_I2C1_Init+0x7c>)
 8000b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b8e:	f000 ff61 	bl	8001a54 <HAL_I2C_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b98:	f000 f8f4 	bl	8000d84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000ba0:	f001 fba3 	bl	80022ea <HAL_I2CEx_ConfigAnalogFilter>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000baa:	f000 f8eb 	bl	8000d84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000bb2:	f001 fbd6 	bl	8002362 <HAL_I2CEx_ConfigDigitalFilter>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000bbc:	f000 f8e2 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200000a4 	.word	0x200000a4
 8000bc8:	40005400 	.word	0x40005400
 8000bcc:	00061a80 	.word	0x00061a80

08000bd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000bd6:	4a18      	ldr	r2, [pc, #96]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000bdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000be0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000c1c:	220a      	movs	r2, #10
 8000c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000c22:	f002 f875 	bl	8002d10 <HAL_SPI_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c2c:	f000 f8aa 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200000f8 	.word	0x200000f8
 8000c38:	40013000 	.word	0x40013000

08000c3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <MX_USART1_UART_Init+0x50>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_USART1_UART_Init+0x4c>)
 8000c74:	f002 f9f4 	bl	8003060 <HAL_UART_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c7e:	f000 f881 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000150 	.word	0x20000150
 8000c8c:	40011000 	.word	0x40011000

08000c90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <MX_USART2_UART_Init+0x50>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000c9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ca0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cc8:	f002 f9ca 	bl	8003060 <HAL_UART_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cd2:	f000 f857 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000194 	.word	0x20000194
 8000ce0:	40004400 	.word	0x40004400

08000ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <MX_GPIO_Init+0x98>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a1e      	ldr	r2, [pc, #120]	; (8000d7c <MX_GPIO_Init+0x98>)
 8000d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_GPIO_Init+0x98>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_GPIO_Init+0x98>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <MX_GPIO_Init+0x98>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_GPIO_Init+0x98>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	603b      	str	r3, [r7, #0]
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_GPIO_Init+0x98>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <MX_GPIO_Init+0x98>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_GPIO_Init+0x98>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nss_GPIO_Port, nss_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2110      	movs	r1, #16
 8000d52:	480b      	ldr	r0, [pc, #44]	; (8000d80 <MX_GPIO_Init+0x9c>)
 8000d54:	f000 fe64 	bl	8001a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : nss_Pin */
  GPIO_InitStruct.Pin = nss_Pin;
 8000d58:	2310      	movs	r3, #16
 8000d5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(nss_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4804      	ldr	r0, [pc, #16]	; (8000d80 <MX_GPIO_Init+0x9c>)
 8000d70:	f000 fcaa 	bl	80016c8 <HAL_GPIO_Init>

}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <Error_Handler+0x8>
	...

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <HAL_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <HAL_MspInit+0x4c>)
 8000da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <HAL_MspInit+0x4c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <HAL_MspInit+0x4c>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_MspInit+0x4c>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800

08000de0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <HAL_I2C_MspInit+0x84>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d12b      	bne.n	8000e5a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_I2C_MspInit+0x88>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <HAL_I2C_MspInit+0x88>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_I2C_MspInit+0x88>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e1e:	23c0      	movs	r3, #192	; 0xc0
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e22:	2312      	movs	r3, #18
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e2e:	2304      	movs	r3, #4
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <HAL_I2C_MspInit+0x8c>)
 8000e3a:	f000 fc45 	bl	80016c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_I2C_MspInit+0x88>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <HAL_I2C_MspInit+0x88>)
 8000e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_I2C_MspInit+0x88>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	; 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40005400 	.word	0x40005400
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020400 	.word	0x40020400

08000e70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a1d      	ldr	r2, [pc, #116]	; (8000f04 <HAL_SPI_MspInit+0x94>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d133      	bne.n	8000efa <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <HAL_SPI_MspInit+0x98>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	4a1b      	ldr	r2, [pc, #108]	; (8000f08 <HAL_SPI_MspInit+0x98>)
 8000e9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <HAL_SPI_MspInit+0x98>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_SPI_MspInit+0x98>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <HAL_SPI_MspInit+0x98>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_SPI_MspInit+0x98>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000eca:	23e0      	movs	r3, #224	; 0xe0
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eda:	2305      	movs	r3, #5
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4809      	ldr	r0, [pc, #36]	; (8000f0c <HAL_SPI_MspInit+0x9c>)
 8000ee6:	f000 fbef 	bl	80016c8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	2023      	movs	r0, #35	; 0x23
 8000ef0:	f000 fb21 	bl	8001536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ef4:	2023      	movs	r0, #35	; 0x23
 8000ef6:	f000 fb3a 	bl	800156e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000efa:	bf00      	nop
 8000efc:	3728      	adds	r7, #40	; 0x28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40013000 	.word	0x40013000
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000

08000f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08c      	sub	sp, #48	; 0x30
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a36      	ldr	r2, [pc, #216]	; (8001008 <HAL_UART_MspInit+0xf8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d135      	bne.n	8000f9e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
 8000f36:	4b35      	ldr	r3, [pc, #212]	; (800100c <HAL_UART_MspInit+0xfc>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	4a34      	ldr	r2, [pc, #208]	; (800100c <HAL_UART_MspInit+0xfc>)
 8000f3c:	f043 0310 	orr.w	r3, r3, #16
 8000f40:	6453      	str	r3, [r2, #68]	; 0x44
 8000f42:	4b32      	ldr	r3, [pc, #200]	; (800100c <HAL_UART_MspInit+0xfc>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f003 0310 	and.w	r3, r3, #16
 8000f4a:	61bb      	str	r3, [r7, #24]
 8000f4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	4b2e      	ldr	r3, [pc, #184]	; (800100c <HAL_UART_MspInit+0xfc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a2d      	ldr	r2, [pc, #180]	; (800100c <HAL_UART_MspInit+0xfc>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b2b      	ldr	r3, [pc, #172]	; (800100c <HAL_UART_MspInit+0xfc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	4822      	ldr	r0, [pc, #136]	; (8001010 <HAL_UART_MspInit+0x100>)
 8000f88:	f000 fb9e 	bl	80016c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2025      	movs	r0, #37	; 0x25
 8000f92:	f000 fad0 	bl	8001536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f96:	2025      	movs	r0, #37	; 0x25
 8000f98:	f000 fae9 	bl	800156e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f9c:	e030      	b.n	8001000 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <HAL_UART_MspInit+0x104>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d12b      	bne.n	8001000 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_UART_MspInit+0xfc>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	4a16      	ldr	r2, [pc, #88]	; (800100c <HAL_UART_MspInit+0xfc>)
 8000fb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <HAL_UART_MspInit+0xfc>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <HAL_UART_MspInit+0xfc>)
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	4a0f      	ldr	r2, [pc, #60]	; (800100c <HAL_UART_MspInit+0xfc>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	; (800100c <HAL_UART_MspInit+0xfc>)
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fe0:	230c      	movs	r3, #12
 8000fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ff0:	2307      	movs	r3, #7
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <HAL_UART_MspInit+0x100>)
 8000ffc:	f000 fb64 	bl	80016c8 <HAL_GPIO_Init>
}
 8001000:	bf00      	nop
 8001002:	3730      	adds	r7, #48	; 0x30
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40011000 	.word	0x40011000
 800100c:	40023800 	.word	0x40023800
 8001010:	40020000 	.word	0x40020000
 8001014:	40004400 	.word	0x40004400

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800101c:	e7fe      	b.n	800101c <NMI_Handler+0x4>

0800101e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <HardFault_Handler+0x4>

08001024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <MemManage_Handler+0x4>

0800102a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <BusFault_Handler+0x4>

08001030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <UsageFault_Handler+0x4>

08001036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001064:	f000 f948 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}

0800106c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <SPI1_IRQHandler+0x10>)
 8001072:	f001 fed7 	bl	8002e24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200000f8 	.word	0x200000f8

08001080 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <USART1_IRQHandler+0x10>)
 8001086:	f002 f8db 	bl	8003240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000150 	.word	0x20000150

08001094 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	e00a      	b.n	80010bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010a6:	f3af 8000 	nop.w
 80010aa:	4601      	mov	r1, r0
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	60ba      	str	r2, [r7, #8]
 80010b2:	b2ca      	uxtb	r2, r1
 80010b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3301      	adds	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dbf0      	blt.n	80010a6 <_read+0x12>
  }

  return len;
 80010c4:	687b      	ldr	r3, [r7, #4]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	e009      	b.n	80010f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	60ba      	str	r2, [r7, #8]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbf1      	blt.n	80010e0 <_write+0x12>
  }
  return len;
 80010fc:	687b      	ldr	r3, [r7, #4]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_close>:

int _close(int file)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800112e:	605a      	str	r2, [r3, #4]
  return 0;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <_isatty>:

int _isatty(int file)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001178:	4a14      	ldr	r2, [pc, #80]	; (80011cc <_sbrk+0x5c>)
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <_sbrk+0x60>)
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <_sbrk+0x64>)
 800118e:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <_sbrk+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	429a      	cmp	r2, r3
 800119e:	d207      	bcs.n	80011b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a0:	f002 ff82 	bl	80040a8 <__errno>
 80011a4:	4603      	mov	r3, r0
 80011a6:	220c      	movs	r2, #12
 80011a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	e009      	b.n	80011c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <_sbrk+0x64>)
 80011c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20030000 	.word	0x20030000
 80011d0:	00000400 	.word	0x00000400
 80011d4:	200001e8 	.word	0x200001e8
 80011d8:	20000200 	.word	0x20000200

080011dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <SystemInit+0x20>)
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <SystemInit+0x20>)
 80011e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001238 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001204:	480d      	ldr	r0, [pc, #52]	; (800123c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001206:	490e      	ldr	r1, [pc, #56]	; (8001240 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001208:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800121c:	4c0b      	ldr	r4, [pc, #44]	; (800124c <LoopFillZerobss+0x26>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800122a:	f7ff ffd7 	bl	80011dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122e:	f002 ff41 	bl	80040b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001232:	f7ff fba9 	bl	8000988 <main>
  bx  lr    
 8001236:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001238:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001244:	08005128 	.word	0x08005128
  ldr r2, =_sbss
 8001248:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800124c:	20000200 	.word	0x20000200

08001250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC_IRQHandler>
	...

08001254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <HAL_Init+0x40>)
 800125e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_Init+0x40>)
 800126a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_Init+0x40>)
 8001276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f000 f94f 	bl	8001520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001282:	200f      	movs	r0, #15
 8001284:	f000 f808 	bl	8001298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001288:	f7ff fd82 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023c00 	.word	0x40023c00

08001298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_InitTick+0x54>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_InitTick+0x58>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f967 	bl	800158a <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00e      	b.n	80012e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d80a      	bhi.n	80012e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012cc:	2200      	movs	r2, #0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f000 f92f 	bl	8001536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <HAL_InitTick+0x5c>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e000      	b.n	80012e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000010 	.word	0x20000010
 80012f0:	20000018 	.word	0x20000018
 80012f4:	20000014 	.word	0x20000014

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_IncTick+0x20>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x24>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_IncTick+0x24>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000018 	.word	0x20000018
 800131c:	200001ec 	.word	0x200001ec

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200001ec 	.word	0x200001ec

08001338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001340:	f7ff ffee 	bl	8001320 <HAL_GetTick>
 8001344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001350:	d005      	beq.n	800135e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <HAL_Delay+0x44>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4413      	add	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800135e:	bf00      	nop
 8001360:	f7ff ffde 	bl	8001320 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	429a      	cmp	r2, r3
 800136e:	d8f7      	bhi.n	8001360 <HAL_Delay+0x28>
  {
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000018 	.word	0x20000018

08001380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800139c:	4013      	ands	r3, r2
 800139e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b2:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	60d3      	str	r3, [r2, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	f003 0307 	and.w	r3, r3, #7
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db0b      	blt.n	800140e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	f003 021f 	and.w	r2, r3, #31
 80013fc:	4907      	ldr	r1, [pc, #28]	; (800141c <__NVIC_EnableIRQ+0x38>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	2001      	movs	r0, #1
 8001406:	fa00 f202 	lsl.w	r2, r0, r2
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000e100 	.word	0xe000e100

08001420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	6039      	str	r1, [r7, #0]
 800142a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	db0a      	blt.n	800144a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	b2da      	uxtb	r2, r3
 8001438:	490c      	ldr	r1, [pc, #48]	; (800146c <__NVIC_SetPriority+0x4c>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	0112      	lsls	r2, r2, #4
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	440b      	add	r3, r1
 8001444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001448:	e00a      	b.n	8001460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4908      	ldr	r1, [pc, #32]	; (8001470 <__NVIC_SetPriority+0x50>)
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	3b04      	subs	r3, #4
 8001458:	0112      	lsls	r2, r2, #4
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	440b      	add	r3, r1
 800145e:	761a      	strb	r2, [r3, #24]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000e100 	.word	0xe000e100
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	; 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f1c3 0307 	rsb	r3, r3, #7
 800148e:	2b04      	cmp	r3, #4
 8001490:	bf28      	it	cs
 8001492:	2304      	movcs	r3, #4
 8001494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3304      	adds	r3, #4
 800149a:	2b06      	cmp	r3, #6
 800149c:	d902      	bls.n	80014a4 <NVIC_EncodePriority+0x30>
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3b03      	subs	r3, #3
 80014a2:	e000      	b.n	80014a6 <NVIC_EncodePriority+0x32>
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43da      	mvns	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	401a      	ands	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014bc:	f04f 31ff 	mov.w	r1, #4294967295
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	43d9      	mvns	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	4313      	orrs	r3, r2
         );
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3724      	adds	r7, #36	; 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ec:	d301      	bcc.n	80014f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00f      	b.n	8001512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <SysTick_Config+0x40>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fa:	210f      	movs	r1, #15
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f7ff ff8e 	bl	8001420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <SysTick_Config+0x40>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <SysTick_Config+0x40>)
 800150c:	2207      	movs	r2, #7
 800150e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	e000e010 	.word	0xe000e010

08001520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff29 	bl	8001380 <__NVIC_SetPriorityGrouping>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001548:	f7ff ff3e 	bl	80013c8 <__NVIC_GetPriorityGrouping>
 800154c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7ff ff8e 	bl	8001474 <NVIC_EncodePriority>
 8001558:	4602      	mov	r2, r0
 800155a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff5d 	bl	8001420 <__NVIC_SetPriority>
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff31 	bl	80013e4 <__NVIC_EnableIRQ>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffa2 	bl	80014dc <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b084      	sub	sp, #16
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015b0:	f7ff feb6 	bl	8001320 <HAL_GetTick>
 80015b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d008      	beq.n	80015d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e052      	b.n	800167a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0216 	bic.w	r2, r2, #22
 80015e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695a      	ldr	r2, [r3, #20]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d103      	bne.n	8001604 <HAL_DMA_Abort+0x62>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001600:	2b00      	cmp	r3, #0
 8001602:	d007      	beq.n	8001614 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0208 	bic.w	r2, r2, #8
 8001612:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0201 	bic.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001624:	e013      	b.n	800164e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001626:	f7ff fe7b 	bl	8001320 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b05      	cmp	r3, #5
 8001632:	d90c      	bls.n	800164e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2220      	movs	r2, #32
 8001638:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2203      	movs	r2, #3
 800163e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e015      	b.n	800167a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1e4      	bne.n	8001626 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001660:	223f      	movs	r2, #63	; 0x3f
 8001662:	409a      	lsls	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d004      	beq.n	80016a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2280      	movs	r2, #128	; 0x80
 800169a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e00c      	b.n	80016ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2205      	movs	r2, #5
 80016a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0201 	bic.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
 80016e2:	e177      	b.n	80019d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016e4:	2201      	movs	r2, #1
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	f040 8166 	bne.w	80019ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	2b01      	cmp	r3, #1
 800170c:	d005      	beq.n	800171a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001716:	2b02      	cmp	r3, #2
 8001718:	d130      	bne.n	800177c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	2203      	movs	r2, #3
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001750:	2201      	movs	r2, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	f003 0201 	and.w	r2, r3, #1
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b03      	cmp	r3, #3
 8001786:	d017      	beq.n	80017b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	2203      	movs	r2, #3
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d123      	bne.n	800180c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	08da      	lsrs	r2, r3, #3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3208      	adds	r2, #8
 80017cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	220f      	movs	r2, #15
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	691a      	ldr	r2, [r3, #16]
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	08da      	lsrs	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3208      	adds	r2, #8
 8001806:	69b9      	ldr	r1, [r7, #24]
 8001808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	2203      	movs	r2, #3
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0203 	and.w	r2, r3, #3
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80c0 	beq.w	80019ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b66      	ldr	r3, [pc, #408]	; (80019ec <HAL_GPIO_Init+0x324>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	4a65      	ldr	r2, [pc, #404]	; (80019ec <HAL_GPIO_Init+0x324>)
 8001858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800185c:	6453      	str	r3, [r2, #68]	; 0x44
 800185e:	4b63      	ldr	r3, [pc, #396]	; (80019ec <HAL_GPIO_Init+0x324>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800186a:	4a61      	ldr	r2, [pc, #388]	; (80019f0 <HAL_GPIO_Init+0x328>)
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	3302      	adds	r3, #2
 8001872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	220f      	movs	r2, #15
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a58      	ldr	r2, [pc, #352]	; (80019f4 <HAL_GPIO_Init+0x32c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d037      	beq.n	8001906 <HAL_GPIO_Init+0x23e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a57      	ldr	r2, [pc, #348]	; (80019f8 <HAL_GPIO_Init+0x330>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d031      	beq.n	8001902 <HAL_GPIO_Init+0x23a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a56      	ldr	r2, [pc, #344]	; (80019fc <HAL_GPIO_Init+0x334>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d02b      	beq.n	80018fe <HAL_GPIO_Init+0x236>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a55      	ldr	r2, [pc, #340]	; (8001a00 <HAL_GPIO_Init+0x338>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d025      	beq.n	80018fa <HAL_GPIO_Init+0x232>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a54      	ldr	r2, [pc, #336]	; (8001a04 <HAL_GPIO_Init+0x33c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d01f      	beq.n	80018f6 <HAL_GPIO_Init+0x22e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a53      	ldr	r2, [pc, #332]	; (8001a08 <HAL_GPIO_Init+0x340>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d019      	beq.n	80018f2 <HAL_GPIO_Init+0x22a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a52      	ldr	r2, [pc, #328]	; (8001a0c <HAL_GPIO_Init+0x344>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d013      	beq.n	80018ee <HAL_GPIO_Init+0x226>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a51      	ldr	r2, [pc, #324]	; (8001a10 <HAL_GPIO_Init+0x348>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d00d      	beq.n	80018ea <HAL_GPIO_Init+0x222>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a50      	ldr	r2, [pc, #320]	; (8001a14 <HAL_GPIO_Init+0x34c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d007      	beq.n	80018e6 <HAL_GPIO_Init+0x21e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a4f      	ldr	r2, [pc, #316]	; (8001a18 <HAL_GPIO_Init+0x350>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d101      	bne.n	80018e2 <HAL_GPIO_Init+0x21a>
 80018de:	2309      	movs	r3, #9
 80018e0:	e012      	b.n	8001908 <HAL_GPIO_Init+0x240>
 80018e2:	230a      	movs	r3, #10
 80018e4:	e010      	b.n	8001908 <HAL_GPIO_Init+0x240>
 80018e6:	2308      	movs	r3, #8
 80018e8:	e00e      	b.n	8001908 <HAL_GPIO_Init+0x240>
 80018ea:	2307      	movs	r3, #7
 80018ec:	e00c      	b.n	8001908 <HAL_GPIO_Init+0x240>
 80018ee:	2306      	movs	r3, #6
 80018f0:	e00a      	b.n	8001908 <HAL_GPIO_Init+0x240>
 80018f2:	2305      	movs	r3, #5
 80018f4:	e008      	b.n	8001908 <HAL_GPIO_Init+0x240>
 80018f6:	2304      	movs	r3, #4
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x240>
 80018fa:	2303      	movs	r3, #3
 80018fc:	e004      	b.n	8001908 <HAL_GPIO_Init+0x240>
 80018fe:	2302      	movs	r3, #2
 8001900:	e002      	b.n	8001908 <HAL_GPIO_Init+0x240>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_GPIO_Init+0x240>
 8001906:	2300      	movs	r3, #0
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	f002 0203 	and.w	r2, r2, #3
 800190e:	0092      	lsls	r2, r2, #2
 8001910:	4093      	lsls	r3, r2
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001918:	4935      	ldr	r1, [pc, #212]	; (80019f0 <HAL_GPIO_Init+0x328>)
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	3302      	adds	r3, #2
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001926:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <HAL_GPIO_Init+0x354>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800194a:	4a34      	ldr	r2, [pc, #208]	; (8001a1c <HAL_GPIO_Init+0x354>)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001950:	4b32      	ldr	r3, [pc, #200]	; (8001a1c <HAL_GPIO_Init+0x354>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001974:	4a29      	ldr	r2, [pc, #164]	; (8001a1c <HAL_GPIO_Init+0x354>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800197a:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <HAL_GPIO_Init+0x354>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800199e:	4a1f      	ldr	r2, [pc, #124]	; (8001a1c <HAL_GPIO_Init+0x354>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_GPIO_Init+0x354>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019c8:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <HAL_GPIO_Init+0x354>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3301      	adds	r3, #1
 80019d2:	61fb      	str	r3, [r7, #28]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b0f      	cmp	r3, #15
 80019d8:	f67f ae84 	bls.w	80016e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3724      	adds	r7, #36	; 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40013800 	.word	0x40013800
 80019f4:	40020000 	.word	0x40020000
 80019f8:	40020400 	.word	0x40020400
 80019fc:	40020800 	.word	0x40020800
 8001a00:	40020c00 	.word	0x40020c00
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40021400 	.word	0x40021400
 8001a0c:	40021800 	.word	0x40021800
 8001a10:	40021c00 	.word	0x40021c00
 8001a14:	40022000 	.word	0x40022000
 8001a18:	40022400 	.word	0x40022400
 8001a1c:	40013c00 	.word	0x40013c00

08001a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a30:	787b      	ldrb	r3, [r7, #1]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a3c:	e003      	b.n	8001a46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a3e:	887b      	ldrh	r3, [r7, #2]
 8001a40:	041a      	lsls	r2, r3, #16
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	619a      	str	r2, [r3, #24]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e12b      	b.n	8001cbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff f9b0 	bl	8000de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2224      	movs	r2, #36	; 0x24
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ab8:	f001 f902 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8001abc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4a81      	ldr	r2, [pc, #516]	; (8001cc8 <HAL_I2C_Init+0x274>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d807      	bhi.n	8001ad8 <HAL_I2C_Init+0x84>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4a80      	ldr	r2, [pc, #512]	; (8001ccc <HAL_I2C_Init+0x278>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	bf94      	ite	ls
 8001ad0:	2301      	movls	r3, #1
 8001ad2:	2300      	movhi	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	e006      	b.n	8001ae6 <HAL_I2C_Init+0x92>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4a7d      	ldr	r2, [pc, #500]	; (8001cd0 <HAL_I2C_Init+0x27c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	bf94      	ite	ls
 8001ae0:	2301      	movls	r3, #1
 8001ae2:	2300      	movhi	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e0e7      	b.n	8001cbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4a78      	ldr	r2, [pc, #480]	; (8001cd4 <HAL_I2C_Init+0x280>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	0c9b      	lsrs	r3, r3, #18
 8001af8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4a6a      	ldr	r2, [pc, #424]	; (8001cc8 <HAL_I2C_Init+0x274>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d802      	bhi.n	8001b28 <HAL_I2C_Init+0xd4>
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	3301      	adds	r3, #1
 8001b26:	e009      	b.n	8001b3c <HAL_I2C_Init+0xe8>
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b2e:	fb02 f303 	mul.w	r3, r2, r3
 8001b32:	4a69      	ldr	r2, [pc, #420]	; (8001cd8 <HAL_I2C_Init+0x284>)
 8001b34:	fba2 2303 	umull	r2, r3, r2, r3
 8001b38:	099b      	lsrs	r3, r3, #6
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	430b      	orrs	r3, r1
 8001b42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	495c      	ldr	r1, [pc, #368]	; (8001cc8 <HAL_I2C_Init+0x274>)
 8001b58:	428b      	cmp	r3, r1
 8001b5a:	d819      	bhi.n	8001b90 <HAL_I2C_Init+0x13c>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	1e59      	subs	r1, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b6a:	1c59      	adds	r1, r3, #1
 8001b6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b70:	400b      	ands	r3, r1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00a      	beq.n	8001b8c <HAL_I2C_Init+0x138>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1e59      	subs	r1, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b84:	3301      	adds	r3, #1
 8001b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8a:	e051      	b.n	8001c30 <HAL_I2C_Init+0x1dc>
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	e04f      	b.n	8001c30 <HAL_I2C_Init+0x1dc>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d111      	bne.n	8001bbc <HAL_I2C_Init+0x168>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1e58      	subs	r0, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6859      	ldr	r1, [r3, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	440b      	add	r3, r1
 8001ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001baa:	3301      	adds	r3, #1
 8001bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf0c      	ite	eq
 8001bb4:	2301      	moveq	r3, #1
 8001bb6:	2300      	movne	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e012      	b.n	8001be2 <HAL_I2C_Init+0x18e>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	1e58      	subs	r0, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	0099      	lsls	r1, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	bf0c      	ite	eq
 8001bdc:	2301      	moveq	r3, #1
 8001bde:	2300      	movne	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_I2C_Init+0x196>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e022      	b.n	8001c30 <HAL_I2C_Init+0x1dc>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10e      	bne.n	8001c10 <HAL_I2C_Init+0x1bc>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1e58      	subs	r0, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6859      	ldr	r1, [r3, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	440b      	add	r3, r1
 8001c00:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c04:	3301      	adds	r3, #1
 8001c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c0e:	e00f      	b.n	8001c30 <HAL_I2C_Init+0x1dc>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1e58      	subs	r0, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6859      	ldr	r1, [r3, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	0099      	lsls	r1, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c26:	3301      	adds	r3, #1
 8001c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	6809      	ldr	r1, [r1, #0]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69da      	ldr	r2, [r3, #28]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6911      	ldr	r1, [r2, #16]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68d2      	ldr	r2, [r2, #12]
 8001c6a:	4311      	orrs	r1, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	430b      	orrs	r3, r1
 8001c72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	000186a0 	.word	0x000186a0
 8001ccc:	001e847f 	.word	0x001e847f
 8001cd0:	003d08ff 	.word	0x003d08ff
 8001cd4:	431bde83 	.word	0x431bde83
 8001cd8:	10624dd3 	.word	0x10624dd3

08001cdc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	460b      	mov	r3, r1
 8001cea:	817b      	strh	r3, [r7, #10]
 8001cec:	4613      	mov	r3, r2
 8001cee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff fb16 	bl	8001320 <HAL_GetTick>
 8001cf4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b20      	cmp	r3, #32
 8001d00:	f040 80e0 	bne.w	8001ec4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2319      	movs	r3, #25
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4970      	ldr	r1, [pc, #448]	; (8001ed0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 f964 	bl	8001fdc <I2C_WaitOnFlagUntilTimeout>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e0d3      	b.n	8001ec6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_I2C_Master_Transmit+0x50>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e0cc      	b.n	8001ec6 <HAL_I2C_Master_Transmit+0x1ea>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d007      	beq.n	8001d52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0201 	orr.w	r2, r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2221      	movs	r2, #33	; 0x21
 8001d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	893a      	ldrh	r2, [r7, #8]
 8001d82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4a50      	ldr	r2, [pc, #320]	; (8001ed4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d94:	8979      	ldrh	r1, [r7, #10]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	6a3a      	ldr	r2, [r7, #32]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f89c 	bl	8001ed8 <I2C_MasterRequestWrite>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e08d      	b.n	8001ec6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001dc0:	e066      	b.n	8001e90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	6a39      	ldr	r1, [r7, #32]
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 f9de 	bl	8002188 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00d      	beq.n	8001dee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d107      	bne.n	8001dea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001de8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e06b      	b.n	8001ec6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d11b      	bne.n	8001e64 <HAL_I2C_Master_Transmit+0x188>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d017      	beq.n	8001e64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	6a39      	ldr	r1, [r7, #32]
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 f9ce 	bl	800220a <I2C_WaitOnBTFFlagUntilTimeout>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00d      	beq.n	8001e90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d107      	bne.n	8001e8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e01a      	b.n	8001ec6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d194      	bne.n	8001dc2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e000      	b.n	8001ec6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ec4:	2302      	movs	r3, #2
  }
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	00100002 	.word	0x00100002
 8001ed4:	ffff0000 	.word	0xffff0000

08001ed8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d006      	beq.n	8001f02 <I2C_MasterRequestWrite+0x2a>
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d003      	beq.n	8001f02 <I2C_MasterRequestWrite+0x2a>
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f00:	d108      	bne.n	8001f14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e00b      	b.n	8001f2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	2b12      	cmp	r3, #18
 8001f1a:	d107      	bne.n	8001f2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f84f 	bl	8001fdc <I2C_WaitOnFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00d      	beq.n	8001f60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f52:	d103      	bne.n	8001f5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e035      	b.n	8001fcc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f68:	d108      	bne.n	8001f7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f6a:	897b      	ldrh	r3, [r7, #10]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f78:	611a      	str	r2, [r3, #16]
 8001f7a:	e01b      	b.n	8001fb4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f7c:	897b      	ldrh	r3, [r7, #10]
 8001f7e:	11db      	asrs	r3, r3, #7
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f003 0306 	and.w	r3, r3, #6
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	f063 030f 	orn	r3, r3, #15
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	490e      	ldr	r1, [pc, #56]	; (8001fd4 <I2C_MasterRequestWrite+0xfc>)
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 f875 	bl	800208a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e010      	b.n	8001fcc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001faa:	897b      	ldrh	r3, [r7, #10]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <I2C_MasterRequestWrite+0x100>)
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 f865 	bl	800208a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	00010008 	.word	0x00010008
 8001fd8:	00010002 	.word	0x00010002

08001fdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fec:	e025      	b.n	800203a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d021      	beq.n	800203a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff6:	f7ff f993 	bl	8001320 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d302      	bcc.n	800200c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d116      	bne.n	800203a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2220      	movs	r2, #32
 8002016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f043 0220 	orr.w	r2, r3, #32
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e023      	b.n	8002082 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	0c1b      	lsrs	r3, r3, #16
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b01      	cmp	r3, #1
 8002042:	d10d      	bne.n	8002060 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4013      	ands	r3, r2
 8002050:	b29b      	uxth	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	bf0c      	ite	eq
 8002056:	2301      	moveq	r3, #1
 8002058:	2300      	movne	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	e00c      	b.n	800207a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4013      	ands	r3, r2
 800206c:	b29b      	uxth	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	bf0c      	ite	eq
 8002072:	2301      	moveq	r3, #1
 8002074:	2300      	movne	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	429a      	cmp	r2, r3
 800207e:	d0b6      	beq.n	8001fee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002098:	e051      	b.n	800213e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a8:	d123      	bne.n	80020f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2220      	movs	r2, #32
 80020ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f043 0204 	orr.w	r2, r3, #4
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e046      	b.n	8002180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d021      	beq.n	800213e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020fa:	f7ff f911 	bl	8001320 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	429a      	cmp	r2, r3
 8002108:	d302      	bcc.n	8002110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d116      	bne.n	800213e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f043 0220 	orr.w	r2, r3, #32
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e020      	b.n	8002180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	0c1b      	lsrs	r3, r3, #16
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b01      	cmp	r3, #1
 8002146:	d10c      	bne.n	8002162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	43da      	mvns	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4013      	ands	r3, r2
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf14      	ite	ne
 800215a:	2301      	movne	r3, #1
 800215c:	2300      	moveq	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	e00b      	b.n	800217a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	43da      	mvns	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	4013      	ands	r3, r2
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf14      	ite	ne
 8002174:	2301      	movne	r3, #1
 8002176:	2300      	moveq	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d18d      	bne.n	800209a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002194:	e02d      	b.n	80021f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f878 	bl	800228c <I2C_IsAcknowledgeFailed>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e02d      	b.n	8002202 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d021      	beq.n	80021f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ae:	f7ff f8b7 	bl	8001320 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d302      	bcc.n	80021c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d116      	bne.n	80021f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f043 0220 	orr.w	r2, r3, #32
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e007      	b.n	8002202 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fc:	2b80      	cmp	r3, #128	; 0x80
 80021fe:	d1ca      	bne.n	8002196 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002216:	e02d      	b.n	8002274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f837 	bl	800228c <I2C_IsAcknowledgeFailed>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e02d      	b.n	8002284 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222e:	d021      	beq.n	8002274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002230:	f7ff f876 	bl	8001320 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	429a      	cmp	r2, r3
 800223e:	d302      	bcc.n	8002246 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d116      	bne.n	8002274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f043 0220 	orr.w	r2, r3, #32
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e007      	b.n	8002284 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b04      	cmp	r3, #4
 8002280:	d1ca      	bne.n	8002218 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a2:	d11b      	bne.n	80022dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	f043 0204 	orr.w	r2, r3, #4
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d129      	bne.n	8002354 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2224      	movs	r2, #36	; 0x24
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0201 	bic.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0210 	bic.w	r2, r2, #16
 8002326:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	e000      	b.n	8002356 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002354:	2302      	movs	r3, #2
  }
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002362:	b480      	push	{r7}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b20      	cmp	r3, #32
 800237a:	d12a      	bne.n	80023d2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2224      	movs	r2, #36	; 0x24
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0201 	bic.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800239c:	89fb      	ldrh	r3, [r7, #14]
 800239e:	f023 030f 	bic.w	r3, r3, #15
 80023a2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	89fb      	ldrh	r3, [r7, #14]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	89fa      	ldrh	r2, [r7, #14]
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0201 	orr.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	e000      	b.n	80023d4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80023d2:	2302      	movs	r3, #2
  }
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e267      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d075      	beq.n	80024ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023fe:	4b88      	ldr	r3, [pc, #544]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b04      	cmp	r3, #4
 8002408:	d00c      	beq.n	8002424 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240a:	4b85      	ldr	r3, [pc, #532]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002412:	2b08      	cmp	r3, #8
 8002414:	d112      	bne.n	800243c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002416:	4b82      	ldr	r3, [pc, #520]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002422:	d10b      	bne.n	800243c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002424:	4b7e      	ldr	r3, [pc, #504]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d05b      	beq.n	80024e8 <HAL_RCC_OscConfig+0x108>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d157      	bne.n	80024e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e242      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002444:	d106      	bne.n	8002454 <HAL_RCC_OscConfig+0x74>
 8002446:	4b76      	ldr	r3, [pc, #472]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a75      	ldr	r2, [pc, #468]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e01d      	b.n	8002490 <HAL_RCC_OscConfig+0xb0>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x98>
 800245e:	4b70      	ldr	r3, [pc, #448]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a6f      	ldr	r2, [pc, #444]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b6d      	ldr	r3, [pc, #436]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a6c      	ldr	r2, [pc, #432]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0xb0>
 8002478:	4b69      	ldr	r3, [pc, #420]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a68      	ldr	r2, [pc, #416]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800247e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b66      	ldr	r3, [pc, #408]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a65      	ldr	r2, [pc, #404]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800248a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d013      	beq.n	80024c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe ff42 	bl	8001320 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a0:	f7fe ff3e 	bl	8001320 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e207      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	4b5b      	ldr	r3, [pc, #364]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0xc0>
 80024be:	e014      	b.n	80024ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe ff2e 	bl	8001320 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c8:	f7fe ff2a 	bl	8001320 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e1f3      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	4b51      	ldr	r3, [pc, #324]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0xe8>
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d063      	beq.n	80025be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024f6:	4b4a      	ldr	r3, [pc, #296]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002502:	4b47      	ldr	r3, [pc, #284]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800250a:	2b08      	cmp	r3, #8
 800250c:	d11c      	bne.n	8002548 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250e:	4b44      	ldr	r3, [pc, #272]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d116      	bne.n	8002548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251a:	4b41      	ldr	r3, [pc, #260]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_RCC_OscConfig+0x152>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e1c7      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002532:	4b3b      	ldr	r3, [pc, #236]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4937      	ldr	r1, [pc, #220]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002546:	e03a      	b.n	80025be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d020      	beq.n	8002592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002550:	4b34      	ldr	r3, [pc, #208]	; (8002624 <HAL_RCC_OscConfig+0x244>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7fe fee3 	bl	8001320 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800255e:	f7fe fedf 	bl	8001320 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e1a8      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257c:	4b28      	ldr	r3, [pc, #160]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4925      	ldr	r1, [pc, #148]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]
 8002590:	e015      	b.n	80025be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002592:	4b24      	ldr	r3, [pc, #144]	; (8002624 <HAL_RCC_OscConfig+0x244>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7fe fec2 	bl	8001320 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a0:	f7fe febe 	bl	8001320 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e187      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d036      	beq.n	8002638 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d016      	beq.n	8002600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <HAL_RCC_OscConfig+0x248>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d8:	f7fe fea2 	bl	8001320 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e0:	f7fe fe9e 	bl	8001320 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e167      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCC_OscConfig+0x240>)
 80025f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x200>
 80025fe:	e01b      	b.n	8002638 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_RCC_OscConfig+0x248>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002606:	f7fe fe8b 	bl	8001320 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260c:	e00e      	b.n	800262c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800260e:	f7fe fe87 	bl	8001320 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d907      	bls.n	800262c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e150      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
 8002620:	40023800 	.word	0x40023800
 8002624:	42470000 	.word	0x42470000
 8002628:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262c:	4b88      	ldr	r3, [pc, #544]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800262e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ea      	bne.n	800260e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 8097 	beq.w	8002774 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264a:	4b81      	ldr	r3, [pc, #516]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10f      	bne.n	8002676 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	4b7d      	ldr	r3, [pc, #500]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a7c      	ldr	r2, [pc, #496]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b7a      	ldr	r3, [pc, #488]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002672:	2301      	movs	r3, #1
 8002674:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002676:	4b77      	ldr	r3, [pc, #476]	; (8002854 <HAL_RCC_OscConfig+0x474>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d118      	bne.n	80026b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002682:	4b74      	ldr	r3, [pc, #464]	; (8002854 <HAL_RCC_OscConfig+0x474>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a73      	ldr	r2, [pc, #460]	; (8002854 <HAL_RCC_OscConfig+0x474>)
 8002688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268e:	f7fe fe47 	bl	8001320 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002696:	f7fe fe43 	bl	8001320 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e10c      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a8:	4b6a      	ldr	r3, [pc, #424]	; (8002854 <HAL_RCC_OscConfig+0x474>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_OscConfig+0x2ea>
 80026bc:	4b64      	ldr	r3, [pc, #400]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c0:	4a63      	ldr	r2, [pc, #396]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6713      	str	r3, [r2, #112]	; 0x70
 80026c8:	e01c      	b.n	8002704 <HAL_RCC_OscConfig+0x324>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b05      	cmp	r3, #5
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0x30c>
 80026d2:	4b5f      	ldr	r3, [pc, #380]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	4a5e      	ldr	r2, [pc, #376]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	6713      	str	r3, [r2, #112]	; 0x70
 80026de:	4b5c      	ldr	r3, [pc, #368]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e2:	4a5b      	ldr	r2, [pc, #364]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ea:	e00b      	b.n	8002704 <HAL_RCC_OscConfig+0x324>
 80026ec:	4b58      	ldr	r3, [pc, #352]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f0:	4a57      	ldr	r2, [pc, #348]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026f2:	f023 0301 	bic.w	r3, r3, #1
 80026f6:	6713      	str	r3, [r2, #112]	; 0x70
 80026f8:	4b55      	ldr	r3, [pc, #340]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	4a54      	ldr	r2, [pc, #336]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80026fe:	f023 0304 	bic.w	r3, r3, #4
 8002702:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d015      	beq.n	8002738 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270c:	f7fe fe08 	bl	8001320 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002712:	e00a      	b.n	800272a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002714:	f7fe fe04 	bl	8001320 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e0cb      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272a:	4b49      	ldr	r3, [pc, #292]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0ee      	beq.n	8002714 <HAL_RCC_OscConfig+0x334>
 8002736:	e014      	b.n	8002762 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002738:	f7fe fdf2 	bl	8001320 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273e:	e00a      	b.n	8002756 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002740:	f7fe fdee 	bl	8001320 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	; 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e0b5      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002756:	4b3e      	ldr	r3, [pc, #248]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1ee      	bne.n	8002740 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002762:	7dfb      	ldrb	r3, [r7, #23]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d105      	bne.n	8002774 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002768:	4b39      	ldr	r3, [pc, #228]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	4a38      	ldr	r2, [pc, #224]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800276e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002772:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80a1 	beq.w	80028c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800277e:	4b34      	ldr	r3, [pc, #208]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b08      	cmp	r3, #8
 8002788:	d05c      	beq.n	8002844 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d141      	bne.n	8002816 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	4b31      	ldr	r3, [pc, #196]	; (8002858 <HAL_RCC_OscConfig+0x478>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7fe fdc2 	bl	8001320 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a0:	f7fe fdbe 	bl	8001320 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e087      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b2:	4b27      	ldr	r3, [pc, #156]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69da      	ldr	r2, [r3, #28]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	019b      	lsls	r3, r3, #6
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	085b      	lsrs	r3, r3, #1
 80027d6:	3b01      	subs	r3, #1
 80027d8:	041b      	lsls	r3, r3, #16
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	491b      	ldr	r1, [pc, #108]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e8:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_RCC_OscConfig+0x478>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7fe fd97 	bl	8001320 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f6:	f7fe fd93 	bl	8001320 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e05c      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x416>
 8002814:	e054      	b.n	80028c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <HAL_RCC_OscConfig+0x478>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7fe fd80 	bl	8001320 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe fd7c 	bl	8001320 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e045      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_RCC_OscConfig+0x470>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x444>
 8002842:	e03d      	b.n	80028c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d107      	bne.n	800285c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e038      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
 8002850:	40023800 	.word	0x40023800
 8002854:	40007000 	.word	0x40007000
 8002858:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_RCC_OscConfig+0x4ec>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d028      	beq.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d121      	bne.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	429a      	cmp	r2, r3
 8002884:	d11a      	bne.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800288c:	4013      	ands	r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002892:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002894:	4293      	cmp	r3, r2
 8002896:	d111      	bne.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	085b      	lsrs	r3, r3, #1
 80028a4:	3b01      	subs	r3, #1
 80028a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d107      	bne.n	80028bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800

080028d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0cc      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	4b68      	ldr	r3, [pc, #416]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d90c      	bls.n	800290c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b65      	ldr	r3, [pc, #404]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b63      	ldr	r3, [pc, #396]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0b8      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002924:	4b59      	ldr	r3, [pc, #356]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4a58      	ldr	r2, [pc, #352]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800292e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800293c:	4b53      	ldr	r3, [pc, #332]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a52      	ldr	r2, [pc, #328]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002948:	4b50      	ldr	r3, [pc, #320]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	494d      	ldr	r1, [pc, #308]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d044      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d107      	bne.n	800297e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296e:	4b47      	ldr	r3, [pc, #284]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d119      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e07f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d003      	beq.n	800298e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298a:	2b03      	cmp	r3, #3
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298e:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e06f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299e:	4b3b      	ldr	r3, [pc, #236]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e067      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ae:	4b37      	ldr	r3, [pc, #220]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4934      	ldr	r1, [pc, #208]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c0:	f7fe fcae 	bl	8001320 <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	e00a      	b.n	80029de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c8:	f7fe fcaa 	bl	8001320 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e04f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	4b2b      	ldr	r3, [pc, #172]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 020c 	and.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d1eb      	bne.n	80029c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f0:	4b25      	ldr	r3, [pc, #148]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d20c      	bcs.n	8002a18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b20      	ldr	r3, [pc, #128]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e032      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4916      	ldr	r1, [pc, #88]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	490e      	ldr	r1, [pc, #56]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a56:	f000 f821 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	490a      	ldr	r1, [pc, #40]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 8002a68:	5ccb      	ldrb	r3, [r1, r3]
 8002a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6e:	4a09      	ldr	r2, [pc, #36]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe fc0e 	bl	8001298 <HAL_InitTick>

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023c00 	.word	0x40023c00
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	08005068 	.word	0x08005068
 8002a94:	20000010 	.word	0x20000010
 8002a98:	20000014 	.word	0x20000014

08002a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa0:	b094      	sub	sp, #80	; 0x50
 8002aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aac:	2300      	movs	r3, #0
 8002aae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ab4:	4b79      	ldr	r3, [pc, #484]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 030c 	and.w	r3, r3, #12
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d00d      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x40>
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	f200 80e1 	bhi.w	8002c88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ace:	e0db      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ad0:	4b73      	ldr	r3, [pc, #460]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ad2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ad4:	e0db      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ad6:	4b73      	ldr	r3, [pc, #460]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ad8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ada:	e0d8      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002adc:	4b6f      	ldr	r3, [pc, #444]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ae4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ae6:	4b6d      	ldr	r3, [pc, #436]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d063      	beq.n	8002bba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af2:	4b6a      	ldr	r3, [pc, #424]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	099b      	lsrs	r3, r3, #6
 8002af8:	2200      	movs	r2, #0
 8002afa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002afc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b04:	633b      	str	r3, [r7, #48]	; 0x30
 8002b06:	2300      	movs	r3, #0
 8002b08:	637b      	str	r3, [r7, #52]	; 0x34
 8002b0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b0e:	4622      	mov	r2, r4
 8002b10:	462b      	mov	r3, r5
 8002b12:	f04f 0000 	mov.w	r0, #0
 8002b16:	f04f 0100 	mov.w	r1, #0
 8002b1a:	0159      	lsls	r1, r3, #5
 8002b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b20:	0150      	lsls	r0, r2, #5
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4621      	mov	r1, r4
 8002b28:	1a51      	subs	r1, r2, r1
 8002b2a:	6139      	str	r1, [r7, #16]
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b40:	4659      	mov	r1, fp
 8002b42:	018b      	lsls	r3, r1, #6
 8002b44:	4651      	mov	r1, sl
 8002b46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b4a:	4651      	mov	r1, sl
 8002b4c:	018a      	lsls	r2, r1, #6
 8002b4e:	4651      	mov	r1, sl
 8002b50:	ebb2 0801 	subs.w	r8, r2, r1
 8002b54:	4659      	mov	r1, fp
 8002b56:	eb63 0901 	sbc.w	r9, r3, r1
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b6e:	4690      	mov	r8, r2
 8002b70:	4699      	mov	r9, r3
 8002b72:	4623      	mov	r3, r4
 8002b74:	eb18 0303 	adds.w	r3, r8, r3
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	462b      	mov	r3, r5
 8002b7c:	eb49 0303 	adc.w	r3, r9, r3
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b8e:	4629      	mov	r1, r5
 8002b90:	024b      	lsls	r3, r1, #9
 8002b92:	4621      	mov	r1, r4
 8002b94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b98:	4621      	mov	r1, r4
 8002b9a:	024a      	lsls	r2, r1, #9
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ba8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bac:	f7fd fb70 	bl	8000290 <__aeabi_uldivmod>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bb8:	e058      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bba:	4b38      	ldr	r3, [pc, #224]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	099b      	lsrs	r3, r3, #6
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bca:	623b      	str	r3, [r7, #32]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bd4:	4642      	mov	r2, r8
 8002bd6:	464b      	mov	r3, r9
 8002bd8:	f04f 0000 	mov.w	r0, #0
 8002bdc:	f04f 0100 	mov.w	r1, #0
 8002be0:	0159      	lsls	r1, r3, #5
 8002be2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002be6:	0150      	lsls	r0, r2, #5
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4641      	mov	r1, r8
 8002bee:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c0c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c10:	eb63 050b 	sbc.w	r5, r3, fp
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	00eb      	lsls	r3, r5, #3
 8002c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c22:	00e2      	lsls	r2, r4, #3
 8002c24:	4614      	mov	r4, r2
 8002c26:	461d      	mov	r5, r3
 8002c28:	4643      	mov	r3, r8
 8002c2a:	18e3      	adds	r3, r4, r3
 8002c2c:	603b      	str	r3, [r7, #0]
 8002c2e:	464b      	mov	r3, r9
 8002c30:	eb45 0303 	adc.w	r3, r5, r3
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c42:	4629      	mov	r1, r5
 8002c44:	028b      	lsls	r3, r1, #10
 8002c46:	4621      	mov	r1, r4
 8002c48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	028a      	lsls	r2, r1, #10
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c56:	2200      	movs	r2, #0
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	61fa      	str	r2, [r7, #28]
 8002c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c60:	f7fd fb16 	bl	8000290 <__aeabi_uldivmod>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4613      	mov	r3, r2
 8002c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	0c1b      	lsrs	r3, r3, #16
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	3301      	adds	r3, #1
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c86:	e002      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3750      	adds	r7, #80	; 0x50
 8002c94:	46bd      	mov	sp, r7
 8002c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	00f42400 	.word	0x00f42400
 8002ca4:	007a1200 	.word	0x007a1200

08002ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000010 	.word	0x20000010

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cc4:	f7ff fff0 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	0a9b      	lsrs	r3, r3, #10
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4903      	ldr	r1, [pc, #12]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	08005078 	.word	0x08005078

08002ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cec:	f7ff ffdc 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	0b5b      	lsrs	r3, r3, #13
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4903      	ldr	r1, [pc, #12]	; (8002d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	08005078 	.word	0x08005078

08002d10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e07b      	b.n	8002e1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d108      	bne.n	8002d3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d32:	d009      	beq.n	8002d48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	61da      	str	r2, [r3, #28]
 8002d3a:	e005      	b.n	8002d48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fe f884 	bl	8000e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	ea42 0103 	orr.w	r1, r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	0c1b      	lsrs	r3, r3, #16
 8002de6:	f003 0104 	and.w	r1, r3, #4
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	f003 0210 	and.w	r2, r3, #16
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69da      	ldr	r2, [r3, #28]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	099b      	lsrs	r3, r3, #6
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10f      	bne.n	8002e68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	099b      	lsrs	r3, r3, #6
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d004      	beq.n	8002e68 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	4798      	blx	r3
    return;
 8002e66:	e0d7      	b.n	8003018 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	085b      	lsrs	r3, r3, #1
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_SPI_IRQHandler+0x66>
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	09db      	lsrs	r3, r3, #7
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d004      	beq.n	8002e8a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	4798      	blx	r3
    return;
 8002e88:	e0c6      	b.n	8003018 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10c      	bne.n	8002eb0 <HAL_SPI_IRQHandler+0x8c>
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	099b      	lsrs	r3, r3, #6
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 80b4 	beq.w	8003018 <HAL_SPI_IRQHandler+0x1f4>
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80ad 	beq.w	8003018 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	099b      	lsrs	r3, r3, #6
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d023      	beq.n	8002f12 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d011      	beq.n	8002efa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eda:	f043 0204 	orr.w	r2, r3, #4
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	e00b      	b.n	8002f12 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	693b      	ldr	r3, [r7, #16]
        return;
 8002f10:	e082      	b.n	8003018 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	095b      	lsrs	r3, r3, #5
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d014      	beq.n	8002f48 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f22:	f043 0201 	orr.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00c      	beq.n	8002f6e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f58:	f043 0208 	orr.w	r2, r3, #8
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002f60:	2300      	movs	r3, #0
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d04f      	beq.n	8003016 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f84:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d104      	bne.n	8002fa2 <HAL_SPI_IRQHandler+0x17e>
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d034      	beq.n	800300c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0203 	bic.w	r2, r2, #3
 8002fb0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d011      	beq.n	8002fde <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fbe:	4a18      	ldr	r2, [pc, #96]	; (8003020 <HAL_SPI_IRQHandler+0x1fc>)
 8002fc0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe fb5b 	bl	8001682 <HAL_DMA_Abort_IT>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d016      	beq.n	8003014 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fea:	4a0d      	ldr	r2, [pc, #52]	; (8003020 <HAL_SPI_IRQHandler+0x1fc>)
 8002fec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe fb45 	bl	8001682 <HAL_DMA_Abort_IT>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800300a:	e003      	b.n	8003014 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f809 	bl	8003024 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003012:	e000      	b.n	8003016 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003014:	bf00      	nop
    return;
 8003016:	bf00      	nop
  }
}
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	08003039 	.word	0x08003039

08003024 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f7ff ffe6 	bl	8003024 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e03f      	b.n	80030f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd ff42 	bl	8000f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2224      	movs	r2, #36	; 0x24
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 fd8b 	bl	8003bc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b08a      	sub	sp, #40	; 0x28
 80030fe:	af02      	add	r7, sp, #8
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	4613      	mov	r3, r2
 8003108:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b20      	cmp	r3, #32
 8003118:	f040 808c 	bne.w	8003234 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_UART_Receive+0x2e>
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e084      	b.n	8003236 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_UART_Receive+0x40>
 8003136:	2302      	movs	r3, #2
 8003138:	e07d      	b.n	8003236 <HAL_UART_Receive+0x13c>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2222      	movs	r2, #34	; 0x22
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003156:	f7fe f8e3 	bl	8001320 <HAL_GetTick>
 800315a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	88fa      	ldrh	r2, [r7, #6]
 8003160:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	88fa      	ldrh	r2, [r7, #6]
 8003166:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003170:	d108      	bne.n	8003184 <HAL_UART_Receive+0x8a>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d104      	bne.n	8003184 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	61bb      	str	r3, [r7, #24]
 8003182:	e003      	b.n	800318c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003188:	2300      	movs	r3, #0
 800318a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003194:	e043      	b.n	800321e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2200      	movs	r2, #0
 800319e:	2120      	movs	r1, #32
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 fb05 	bl	80037b0 <UART_WaitOnFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e042      	b.n	8003236 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10c      	bne.n	80031d0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	3302      	adds	r3, #2
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	e01f      	b.n	8003210 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d8:	d007      	beq.n	80031ea <HAL_UART_Receive+0xf0>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10a      	bne.n	80031f8 <HAL_UART_Receive+0xfe>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	701a      	strb	r2, [r3, #0]
 80031f6:	e008      	b.n	800320a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003204:	b2da      	uxtb	r2, r3
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3301      	adds	r3, #1
 800320e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1b6      	bne.n	8003196 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	e000      	b.n	8003236 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003234:	2302      	movs	r3, #2
  }
}
 8003236:	4618      	mov	r0, r3
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b0ba      	sub	sp, #232	; 0xe8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003266:	2300      	movs	r3, #0
 8003268:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800326c:	2300      	movs	r3, #0
 800326e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800327e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10f      	bne.n	80032a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d009      	beq.n	80032a6 <HAL_UART_IRQHandler+0x66>
 8003292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fbd3 	bl	8003a4a <UART_Receive_IT>
      return;
 80032a4:	e256      	b.n	8003754 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 80de 	beq.w	800346c <HAL_UART_IRQHandler+0x22c>
 80032b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d106      	bne.n	80032ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80d1 	beq.w	800346c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <HAL_UART_IRQHandler+0xae>
 80032d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f043 0201 	orr.w	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <HAL_UART_IRQHandler+0xd2>
 80032fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f043 0202 	orr.w	r2, r3, #2
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00b      	beq.n	8003336 <HAL_UART_IRQHandler+0xf6>
 800331e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f043 0204 	orr.w	r2, r3, #4
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d011      	beq.n	8003366 <HAL_UART_IRQHandler+0x126>
 8003342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003346:	f003 0320 	and.w	r3, r3, #32
 800334a:	2b00      	cmp	r3, #0
 800334c:	d105      	bne.n	800335a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800334e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f043 0208 	orr.w	r2, r3, #8
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 81ed 	beq.w	800374a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_UART_IRQHandler+0x14e>
 800337c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 fb5e 	bl	8003a4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003398:	2b40      	cmp	r3, #64	; 0x40
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d103      	bne.n	80033ba <HAL_UART_IRQHandler+0x17a>
 80033b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d04f      	beq.n	800345a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fa66 	bl	800388c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ca:	2b40      	cmp	r3, #64	; 0x40
 80033cc:	d141      	bne.n	8003452 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3314      	adds	r3, #20
 80033d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3314      	adds	r3, #20
 80033f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003402:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003406:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1d9      	bne.n	80033ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341e:	2b00      	cmp	r3, #0
 8003420:	d013      	beq.n	800344a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	4a7d      	ldr	r2, [pc, #500]	; (800361c <HAL_UART_IRQHandler+0x3dc>)
 8003428:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe f927 	bl	8001682 <HAL_DMA_Abort_IT>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d016      	beq.n	8003468 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003444:	4610      	mov	r0, r2
 8003446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003448:	e00e      	b.n	8003468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f99a 	bl	8003784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003450:	e00a      	b.n	8003468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f996 	bl	8003784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003458:	e006      	b.n	8003468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f992 	bl	8003784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003466:	e170      	b.n	800374a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003468:	bf00      	nop
    return;
 800346a:	e16e      	b.n	800374a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	2b01      	cmp	r3, #1
 8003472:	f040 814a 	bne.w	800370a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 8143 	beq.w	800370a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 813c 	beq.w	800370a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003492:	2300      	movs	r3, #0
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b2:	2b40      	cmp	r3, #64	; 0x40
 80034b4:	f040 80b4 	bne.w	8003620 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 8140 	beq.w	800374e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034d6:	429a      	cmp	r2, r3
 80034d8:	f080 8139 	bcs.w	800374e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ee:	f000 8088 	beq.w	8003602 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	330c      	adds	r3, #12
 80034f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003500:	e853 3f00 	ldrex	r3, [r3]
 8003504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003508:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800350c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003510:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	330c      	adds	r3, #12
 800351a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800351e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003522:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003526:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800352a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800352e:	e841 2300 	strex	r3, r2, [r1]
 8003532:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1d9      	bne.n	80034f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3314      	adds	r3, #20
 8003544:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003548:	e853 3f00 	ldrex	r3, [r3]
 800354c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800354e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003550:	f023 0301 	bic.w	r3, r3, #1
 8003554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3314      	adds	r3, #20
 800355e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003562:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003566:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003568:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800356a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e1      	bne.n	800353e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3314      	adds	r3, #20
 8003580:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003584:	e853 3f00 	ldrex	r3, [r3]
 8003588:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800358a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800358c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003590:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	3314      	adds	r3, #20
 800359a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800359e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80035a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80035a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035a6:	e841 2300 	strex	r3, r2, [r1]
 80035aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80035ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e3      	bne.n	800357a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	330c      	adds	r3, #12
 80035c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ca:	e853 3f00 	ldrex	r3, [r3]
 80035ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035d2:	f023 0310 	bic.w	r3, r3, #16
 80035d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	330c      	adds	r3, #12
 80035e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80035e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80035e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e3      	bne.n	80035c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fd ffd0 	bl	80015a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800360a:	b29b      	uxth	r3, r3
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	b29b      	uxth	r3, r3
 8003610:	4619      	mov	r1, r3
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f8c0 	bl	8003798 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003618:	e099      	b.n	800374e <HAL_UART_IRQHandler+0x50e>
 800361a:	bf00      	nop
 800361c:	08003953 	.word	0x08003953
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003628:	b29b      	uxth	r3, r3
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 808b 	beq.w	8003752 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800363c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 8086 	beq.w	8003752 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	330c      	adds	r3, #12
 800364c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003650:	e853 3f00 	ldrex	r3, [r3]
 8003654:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003658:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800365c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	330c      	adds	r3, #12
 8003666:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800366a:	647a      	str	r2, [r7, #68]	; 0x44
 800366c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003670:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003672:	e841 2300 	strex	r3, r2, [r1]
 8003676:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e3      	bne.n	8003646 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3314      	adds	r3, #20
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	e853 3f00 	ldrex	r3, [r3]
 800368c:	623b      	str	r3, [r7, #32]
   return(result);
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f023 0301 	bic.w	r3, r3, #1
 8003694:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3314      	adds	r3, #20
 800369e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036a2:	633a      	str	r2, [r7, #48]	; 0x30
 80036a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e3      	bne.n	800367e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	e853 3f00 	ldrex	r3, [r3]
 80036d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0310 	bic.w	r3, r3, #16
 80036da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	330c      	adds	r3, #12
 80036e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80036e8:	61fa      	str	r2, [r7, #28]
 80036ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ec:	69b9      	ldr	r1, [r7, #24]
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	e841 2300 	strex	r3, r2, [r1]
 80036f4:	617b      	str	r3, [r7, #20]
   return(result);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1e3      	bne.n	80036c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003700:	4619      	mov	r1, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f848 	bl	8003798 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003708:	e023      	b.n	8003752 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800370a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	d009      	beq.n	800372a <HAL_UART_IRQHandler+0x4ea>
 8003716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800371a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f929 	bl	800397a <UART_Transmit_IT>
    return;
 8003728:	e014      	b.n	8003754 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800372a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00e      	beq.n	8003754 <HAL_UART_IRQHandler+0x514>
 8003736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d008      	beq.n	8003754 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f969 	bl	8003a1a <UART_EndTransmit_IT>
    return;
 8003748:	e004      	b.n	8003754 <HAL_UART_IRQHandler+0x514>
    return;
 800374a:	bf00      	nop
 800374c:	e002      	b.n	8003754 <HAL_UART_IRQHandler+0x514>
      return;
 800374e:	bf00      	nop
 8003750:	e000      	b.n	8003754 <HAL_UART_IRQHandler+0x514>
      return;
 8003752:	bf00      	nop
  }
}
 8003754:	37e8      	adds	r7, #232	; 0xe8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop

0800375c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b090      	sub	sp, #64	; 0x40
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	4613      	mov	r3, r2
 80037be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c0:	e050      	b.n	8003864 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d04c      	beq.n	8003864 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80037d0:	f7fd fda6 	bl	8001320 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037dc:	429a      	cmp	r2, r3
 80037de:	d241      	bcs.n	8003864 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	330c      	adds	r3, #12
 80037e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	e853 3f00 	ldrex	r3, [r3]
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	330c      	adds	r3, #12
 80037fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003800:	637a      	str	r2, [r7, #52]	; 0x34
 8003802:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003808:	e841 2300 	strex	r3, r2, [r1]
 800380c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e5      	bne.n	80037e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3314      	adds	r3, #20
 800381a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	e853 3f00 	ldrex	r3, [r3]
 8003822:	613b      	str	r3, [r7, #16]
   return(result);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f023 0301 	bic.w	r3, r3, #1
 800382a:	63bb      	str	r3, [r7, #56]	; 0x38
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3314      	adds	r3, #20
 8003832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003834:	623a      	str	r2, [r7, #32]
 8003836:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	69f9      	ldr	r1, [r7, #28]
 800383a:	6a3a      	ldr	r2, [r7, #32]
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	61bb      	str	r3, [r7, #24]
   return(result);
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e5      	bne.n	8003814 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e00f      	b.n	8003884 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4013      	ands	r3, r2
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	429a      	cmp	r2, r3
 8003872:	bf0c      	ite	eq
 8003874:	2301      	moveq	r3, #1
 8003876:	2300      	movne	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	429a      	cmp	r2, r3
 8003880:	d09f      	beq.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3740      	adds	r7, #64	; 0x40
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800388c:	b480      	push	{r7}
 800388e:	b095      	sub	sp, #84	; 0x54
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	330c      	adds	r3, #12
 800389a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389e:	e853 3f00 	ldrex	r3, [r3]
 80038a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	330c      	adds	r3, #12
 80038b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038b4:	643a      	str	r2, [r7, #64]	; 0x40
 80038b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038bc:	e841 2300 	strex	r3, r2, [r1]
 80038c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1e5      	bne.n	8003894 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3314      	adds	r3, #20
 80038ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	e853 3f00 	ldrex	r3, [r3]
 80038d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f023 0301 	bic.w	r3, r3, #1
 80038de:	64bb      	str	r3, [r7, #72]	; 0x48
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3314      	adds	r3, #20
 80038e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038f0:	e841 2300 	strex	r3, r2, [r1]
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1e5      	bne.n	80038c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	2b01      	cmp	r3, #1
 8003902:	d119      	bne.n	8003938 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	330c      	adds	r3, #12
 800390a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	e853 3f00 	ldrex	r3, [r3]
 8003912:	60bb      	str	r3, [r7, #8]
   return(result);
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f023 0310 	bic.w	r3, r3, #16
 800391a:	647b      	str	r3, [r7, #68]	; 0x44
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	330c      	adds	r3, #12
 8003922:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003924:	61ba      	str	r2, [r7, #24]
 8003926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003928:	6979      	ldr	r1, [r7, #20]
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	e841 2300 	strex	r3, r2, [r1]
 8003930:	613b      	str	r3, [r7, #16]
   return(result);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e5      	bne.n	8003904 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003946:	bf00      	nop
 8003948:	3754      	adds	r7, #84	; 0x54
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f7ff ff09 	bl	8003784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003972:	bf00      	nop
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800397a:	b480      	push	{r7}
 800397c:	b085      	sub	sp, #20
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b21      	cmp	r3, #33	; 0x21
 800398c:	d13e      	bne.n	8003a0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003996:	d114      	bne.n	80039c2 <UART_Transmit_IT+0x48>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d110      	bne.n	80039c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	1c9a      	adds	r2, r3, #2
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	621a      	str	r2, [r3, #32]
 80039c0:	e008      	b.n	80039d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	1c59      	adds	r1, r3, #1
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6211      	str	r1, [r2, #32]
 80039cc:	781a      	ldrb	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29b      	uxth	r3, r3
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	4619      	mov	r1, r3
 80039e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10f      	bne.n	8003a08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e000      	b.n	8003a0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a0c:	2302      	movs	r3, #2
  }
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff fe8e 	bl	800375c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b08c      	sub	sp, #48	; 0x30
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b22      	cmp	r3, #34	; 0x22
 8003a5c:	f040 80ab 	bne.w	8003bb6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a68:	d117      	bne.n	8003a9a <UART_Receive_IT+0x50>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d113      	bne.n	8003a9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	1c9a      	adds	r2, r3, #2
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	629a      	str	r2, [r3, #40]	; 0x28
 8003a98:	e026      	b.n	8003ae8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aac:	d007      	beq.n	8003abe <UART_Receive_IT+0x74>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10a      	bne.n	8003acc <UART_Receive_IT+0x82>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac8:	701a      	strb	r2, [r3, #0]
 8003aca:	e008      	b.n	8003ade <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	4619      	mov	r1, r3
 8003af6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d15a      	bne.n	8003bb2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0220 	bic.w	r2, r2, #32
 8003b0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0201 	bic.w	r2, r2, #1
 8003b2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d135      	bne.n	8003ba8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	330c      	adds	r3, #12
 8003b48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	613b      	str	r3, [r7, #16]
   return(result);
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f023 0310 	bic.w	r3, r3, #16
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	330c      	adds	r3, #12
 8003b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b62:	623a      	str	r2, [r7, #32]
 8003b64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	69f9      	ldr	r1, [r7, #28]
 8003b68:	6a3a      	ldr	r2, [r7, #32]
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e5      	bne.n	8003b42 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	d10a      	bne.n	8003b9a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b84:	2300      	movs	r3, #0
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff fdf9 	bl	8003798 <HAL_UARTEx_RxEventCallback>
 8003ba6:	e002      	b.n	8003bae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff fde1 	bl	8003770 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e002      	b.n	8003bb8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e000      	b.n	8003bb8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
  }
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3730      	adds	r7, #48	; 0x30
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bc4:	b0c0      	sub	sp, #256	; 0x100
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bdc:	68d9      	ldr	r1, [r3, #12]
 8003bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	ea40 0301 	orr.w	r3, r0, r1
 8003be8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c18:	f021 010c 	bic.w	r1, r1, #12
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c26:	430b      	orrs	r3, r1
 8003c28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3a:	6999      	ldr	r1, [r3, #24]
 8003c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	ea40 0301 	orr.w	r3, r0, r1
 8003c46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4b8f      	ldr	r3, [pc, #572]	; (8003e8c <UART_SetConfig+0x2cc>)
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d005      	beq.n	8003c60 <UART_SetConfig+0xa0>
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	4b8d      	ldr	r3, [pc, #564]	; (8003e90 <UART_SetConfig+0x2d0>)
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d104      	bne.n	8003c6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c60:	f7ff f842 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 8003c64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c68:	e003      	b.n	8003c72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c6a:	f7ff f829 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8003c6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c7c:	f040 810c 	bne.w	8003e98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c84:	2200      	movs	r2, #0
 8003c86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c92:	4622      	mov	r2, r4
 8003c94:	462b      	mov	r3, r5
 8003c96:	1891      	adds	r1, r2, r2
 8003c98:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c9a:	415b      	adcs	r3, r3
 8003c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	eb12 0801 	adds.w	r8, r2, r1
 8003ca8:	4629      	mov	r1, r5
 8003caa:	eb43 0901 	adc.w	r9, r3, r1
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cc2:	4690      	mov	r8, r2
 8003cc4:	4699      	mov	r9, r3
 8003cc6:	4623      	mov	r3, r4
 8003cc8:	eb18 0303 	adds.w	r3, r8, r3
 8003ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cd0:	462b      	mov	r3, r5
 8003cd2:	eb49 0303 	adc.w	r3, r9, r3
 8003cd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ce6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cee:	460b      	mov	r3, r1
 8003cf0:	18db      	adds	r3, r3, r3
 8003cf2:	653b      	str	r3, [r7, #80]	; 0x50
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	eb42 0303 	adc.w	r3, r2, r3
 8003cfa:	657b      	str	r3, [r7, #84]	; 0x54
 8003cfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d04:	f7fc fac4 	bl	8000290 <__aeabi_uldivmod>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4b61      	ldr	r3, [pc, #388]	; (8003e94 <UART_SetConfig+0x2d4>)
 8003d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	011c      	lsls	r4, r3, #4
 8003d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d28:	4642      	mov	r2, r8
 8003d2a:	464b      	mov	r3, r9
 8003d2c:	1891      	adds	r1, r2, r2
 8003d2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d30:	415b      	adcs	r3, r3
 8003d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d38:	4641      	mov	r1, r8
 8003d3a:	eb12 0a01 	adds.w	sl, r2, r1
 8003d3e:	4649      	mov	r1, r9
 8003d40:	eb43 0b01 	adc.w	fp, r3, r1
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d58:	4692      	mov	sl, r2
 8003d5a:	469b      	mov	fp, r3
 8003d5c:	4643      	mov	r3, r8
 8003d5e:	eb1a 0303 	adds.w	r3, sl, r3
 8003d62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d66:	464b      	mov	r3, r9
 8003d68:	eb4b 0303 	adc.w	r3, fp, r3
 8003d6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d84:	460b      	mov	r3, r1
 8003d86:	18db      	adds	r3, r3, r3
 8003d88:	643b      	str	r3, [r7, #64]	; 0x40
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	eb42 0303 	adc.w	r3, r2, r3
 8003d90:	647b      	str	r3, [r7, #68]	; 0x44
 8003d92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d9a:	f7fc fa79 	bl	8000290 <__aeabi_uldivmod>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4611      	mov	r1, r2
 8003da4:	4b3b      	ldr	r3, [pc, #236]	; (8003e94 <UART_SetConfig+0x2d4>)
 8003da6:	fba3 2301 	umull	r2, r3, r3, r1
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	2264      	movs	r2, #100	; 0x64
 8003dae:	fb02 f303 	mul.w	r3, r2, r3
 8003db2:	1acb      	subs	r3, r1, r3
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003dba:	4b36      	ldr	r3, [pc, #216]	; (8003e94 <UART_SetConfig+0x2d4>)
 8003dbc:	fba3 2302 	umull	r2, r3, r3, r2
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dc8:	441c      	add	r4, r3
 8003dca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003dd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ddc:	4642      	mov	r2, r8
 8003dde:	464b      	mov	r3, r9
 8003de0:	1891      	adds	r1, r2, r2
 8003de2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003de4:	415b      	adcs	r3, r3
 8003de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003de8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003dec:	4641      	mov	r1, r8
 8003dee:	1851      	adds	r1, r2, r1
 8003df0:	6339      	str	r1, [r7, #48]	; 0x30
 8003df2:	4649      	mov	r1, r9
 8003df4:	414b      	adcs	r3, r1
 8003df6:	637b      	str	r3, [r7, #52]	; 0x34
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e04:	4659      	mov	r1, fp
 8003e06:	00cb      	lsls	r3, r1, #3
 8003e08:	4651      	mov	r1, sl
 8003e0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e0e:	4651      	mov	r1, sl
 8003e10:	00ca      	lsls	r2, r1, #3
 8003e12:	4610      	mov	r0, r2
 8003e14:	4619      	mov	r1, r3
 8003e16:	4603      	mov	r3, r0
 8003e18:	4642      	mov	r2, r8
 8003e1a:	189b      	adds	r3, r3, r2
 8003e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e20:	464b      	mov	r3, r9
 8003e22:	460a      	mov	r2, r1
 8003e24:	eb42 0303 	adc.w	r3, r2, r3
 8003e28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e40:	460b      	mov	r3, r1
 8003e42:	18db      	adds	r3, r3, r3
 8003e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e46:	4613      	mov	r3, r2
 8003e48:	eb42 0303 	adc.w	r3, r2, r3
 8003e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e56:	f7fc fa1b 	bl	8000290 <__aeabi_uldivmod>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <UART_SetConfig+0x2d4>)
 8003e60:	fba3 1302 	umull	r1, r3, r3, r2
 8003e64:	095b      	lsrs	r3, r3, #5
 8003e66:	2164      	movs	r1, #100	; 0x64
 8003e68:	fb01 f303 	mul.w	r3, r1, r3
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	3332      	adds	r3, #50	; 0x32
 8003e72:	4a08      	ldr	r2, [pc, #32]	; (8003e94 <UART_SetConfig+0x2d4>)
 8003e74:	fba2 2303 	umull	r2, r3, r2, r3
 8003e78:	095b      	lsrs	r3, r3, #5
 8003e7a:	f003 0207 	and.w	r2, r3, #7
 8003e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4422      	add	r2, r4
 8003e86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e88:	e105      	b.n	8004096 <UART_SetConfig+0x4d6>
 8003e8a:	bf00      	nop
 8003e8c:	40011000 	.word	0x40011000
 8003e90:	40011400 	.word	0x40011400
 8003e94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ea2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ea6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003eaa:	4642      	mov	r2, r8
 8003eac:	464b      	mov	r3, r9
 8003eae:	1891      	adds	r1, r2, r2
 8003eb0:	6239      	str	r1, [r7, #32]
 8003eb2:	415b      	adcs	r3, r3
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003eba:	4641      	mov	r1, r8
 8003ebc:	1854      	adds	r4, r2, r1
 8003ebe:	4649      	mov	r1, r9
 8003ec0:	eb43 0501 	adc.w	r5, r3, r1
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	00eb      	lsls	r3, r5, #3
 8003ece:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ed2:	00e2      	lsls	r2, r4, #3
 8003ed4:	4614      	mov	r4, r2
 8003ed6:	461d      	mov	r5, r3
 8003ed8:	4643      	mov	r3, r8
 8003eda:	18e3      	adds	r3, r4, r3
 8003edc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ee0:	464b      	mov	r3, r9
 8003ee2:	eb45 0303 	adc.w	r3, r5, r3
 8003ee6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ef6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f06:	4629      	mov	r1, r5
 8003f08:	008b      	lsls	r3, r1, #2
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f10:	4621      	mov	r1, r4
 8003f12:	008a      	lsls	r2, r1, #2
 8003f14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f18:	f7fc f9ba 	bl	8000290 <__aeabi_uldivmod>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4b60      	ldr	r3, [pc, #384]	; (80040a4 <UART_SetConfig+0x4e4>)
 8003f22:	fba3 2302 	umull	r2, r3, r3, r2
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	011c      	lsls	r4, r3, #4
 8003f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f3c:	4642      	mov	r2, r8
 8003f3e:	464b      	mov	r3, r9
 8003f40:	1891      	adds	r1, r2, r2
 8003f42:	61b9      	str	r1, [r7, #24]
 8003f44:	415b      	adcs	r3, r3
 8003f46:	61fb      	str	r3, [r7, #28]
 8003f48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f4c:	4641      	mov	r1, r8
 8003f4e:	1851      	adds	r1, r2, r1
 8003f50:	6139      	str	r1, [r7, #16]
 8003f52:	4649      	mov	r1, r9
 8003f54:	414b      	adcs	r3, r1
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f64:	4659      	mov	r1, fp
 8003f66:	00cb      	lsls	r3, r1, #3
 8003f68:	4651      	mov	r1, sl
 8003f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f6e:	4651      	mov	r1, sl
 8003f70:	00ca      	lsls	r2, r1, #3
 8003f72:	4610      	mov	r0, r2
 8003f74:	4619      	mov	r1, r3
 8003f76:	4603      	mov	r3, r0
 8003f78:	4642      	mov	r2, r8
 8003f7a:	189b      	adds	r3, r3, r2
 8003f7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f80:	464b      	mov	r3, r9
 8003f82:	460a      	mov	r2, r1
 8003f84:	eb42 0303 	adc.w	r3, r2, r3
 8003f88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003fa4:	4649      	mov	r1, r9
 8003fa6:	008b      	lsls	r3, r1, #2
 8003fa8:	4641      	mov	r1, r8
 8003faa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fae:	4641      	mov	r1, r8
 8003fb0:	008a      	lsls	r2, r1, #2
 8003fb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003fb6:	f7fc f96b 	bl	8000290 <__aeabi_uldivmod>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4b39      	ldr	r3, [pc, #228]	; (80040a4 <UART_SetConfig+0x4e4>)
 8003fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	2164      	movs	r1, #100	; 0x64
 8003fc8:	fb01 f303 	mul.w	r3, r1, r3
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	3332      	adds	r3, #50	; 0x32
 8003fd2:	4a34      	ldr	r2, [pc, #208]	; (80040a4 <UART_SetConfig+0x4e4>)
 8003fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fde:	441c      	add	r4, r3
 8003fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	673b      	str	r3, [r7, #112]	; 0x70
 8003fe8:	677a      	str	r2, [r7, #116]	; 0x74
 8003fea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fee:	4642      	mov	r2, r8
 8003ff0:	464b      	mov	r3, r9
 8003ff2:	1891      	adds	r1, r2, r2
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	415b      	adcs	r3, r3
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ffe:	4641      	mov	r1, r8
 8004000:	1851      	adds	r1, r2, r1
 8004002:	6039      	str	r1, [r7, #0]
 8004004:	4649      	mov	r1, r9
 8004006:	414b      	adcs	r3, r1
 8004008:	607b      	str	r3, [r7, #4]
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004016:	4659      	mov	r1, fp
 8004018:	00cb      	lsls	r3, r1, #3
 800401a:	4651      	mov	r1, sl
 800401c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004020:	4651      	mov	r1, sl
 8004022:	00ca      	lsls	r2, r1, #3
 8004024:	4610      	mov	r0, r2
 8004026:	4619      	mov	r1, r3
 8004028:	4603      	mov	r3, r0
 800402a:	4642      	mov	r2, r8
 800402c:	189b      	adds	r3, r3, r2
 800402e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004030:	464b      	mov	r3, r9
 8004032:	460a      	mov	r2, r1
 8004034:	eb42 0303 	adc.w	r3, r2, r3
 8004038:	66fb      	str	r3, [r7, #108]	; 0x6c
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	663b      	str	r3, [r7, #96]	; 0x60
 8004044:	667a      	str	r2, [r7, #100]	; 0x64
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004052:	4649      	mov	r1, r9
 8004054:	008b      	lsls	r3, r1, #2
 8004056:	4641      	mov	r1, r8
 8004058:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800405c:	4641      	mov	r1, r8
 800405e:	008a      	lsls	r2, r1, #2
 8004060:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004064:	f7fc f914 	bl	8000290 <__aeabi_uldivmod>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <UART_SetConfig+0x4e4>)
 800406e:	fba3 1302 	umull	r1, r3, r3, r2
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	2164      	movs	r1, #100	; 0x64
 8004076:	fb01 f303 	mul.w	r3, r1, r3
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	3332      	adds	r3, #50	; 0x32
 8004080:	4a08      	ldr	r2, [pc, #32]	; (80040a4 <UART_SetConfig+0x4e4>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	f003 020f 	and.w	r2, r3, #15
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4422      	add	r2, r4
 8004094:	609a      	str	r2, [r3, #8]
}
 8004096:	bf00      	nop
 8004098:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800409c:	46bd      	mov	sp, r7
 800409e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040a2:	bf00      	nop
 80040a4:	51eb851f 	.word	0x51eb851f

080040a8 <__errno>:
 80040a8:	4b01      	ldr	r3, [pc, #4]	; (80040b0 <__errno+0x8>)
 80040aa:	6818      	ldr	r0, [r3, #0]
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	2000001c 	.word	0x2000001c

080040b4 <__libc_init_array>:
 80040b4:	b570      	push	{r4, r5, r6, lr}
 80040b6:	4d0d      	ldr	r5, [pc, #52]	; (80040ec <__libc_init_array+0x38>)
 80040b8:	4c0d      	ldr	r4, [pc, #52]	; (80040f0 <__libc_init_array+0x3c>)
 80040ba:	1b64      	subs	r4, r4, r5
 80040bc:	10a4      	asrs	r4, r4, #2
 80040be:	2600      	movs	r6, #0
 80040c0:	42a6      	cmp	r6, r4
 80040c2:	d109      	bne.n	80040d8 <__libc_init_array+0x24>
 80040c4:	4d0b      	ldr	r5, [pc, #44]	; (80040f4 <__libc_init_array+0x40>)
 80040c6:	4c0c      	ldr	r4, [pc, #48]	; (80040f8 <__libc_init_array+0x44>)
 80040c8:	f000 ffae 	bl	8005028 <_init>
 80040cc:	1b64      	subs	r4, r4, r5
 80040ce:	10a4      	asrs	r4, r4, #2
 80040d0:	2600      	movs	r6, #0
 80040d2:	42a6      	cmp	r6, r4
 80040d4:	d105      	bne.n	80040e2 <__libc_init_array+0x2e>
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040dc:	4798      	blx	r3
 80040de:	3601      	adds	r6, #1
 80040e0:	e7ee      	b.n	80040c0 <__libc_init_array+0xc>
 80040e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e6:	4798      	blx	r3
 80040e8:	3601      	adds	r6, #1
 80040ea:	e7f2      	b.n	80040d2 <__libc_init_array+0x1e>
 80040ec:	08005120 	.word	0x08005120
 80040f0:	08005120 	.word	0x08005120
 80040f4:	08005120 	.word	0x08005120
 80040f8:	08005124 	.word	0x08005124

080040fc <memset>:
 80040fc:	4402      	add	r2, r0
 80040fe:	4603      	mov	r3, r0
 8004100:	4293      	cmp	r3, r2
 8004102:	d100      	bne.n	8004106 <memset+0xa>
 8004104:	4770      	bx	lr
 8004106:	f803 1b01 	strb.w	r1, [r3], #1
 800410a:	e7f9      	b.n	8004100 <memset+0x4>

0800410c <iprintf>:
 800410c:	b40f      	push	{r0, r1, r2, r3}
 800410e:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <iprintf+0x2c>)
 8004110:	b513      	push	{r0, r1, r4, lr}
 8004112:	681c      	ldr	r4, [r3, #0]
 8004114:	b124      	cbz	r4, 8004120 <iprintf+0x14>
 8004116:	69a3      	ldr	r3, [r4, #24]
 8004118:	b913      	cbnz	r3, 8004120 <iprintf+0x14>
 800411a:	4620      	mov	r0, r4
 800411c:	f000 f866 	bl	80041ec <__sinit>
 8004120:	ab05      	add	r3, sp, #20
 8004122:	9a04      	ldr	r2, [sp, #16]
 8004124:	68a1      	ldr	r1, [r4, #8]
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	4620      	mov	r0, r4
 800412a:	f000 f9bd 	bl	80044a8 <_vfiprintf_r>
 800412e:	b002      	add	sp, #8
 8004130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004134:	b004      	add	sp, #16
 8004136:	4770      	bx	lr
 8004138:	2000001c 	.word	0x2000001c

0800413c <std>:
 800413c:	2300      	movs	r3, #0
 800413e:	b510      	push	{r4, lr}
 8004140:	4604      	mov	r4, r0
 8004142:	e9c0 3300 	strd	r3, r3, [r0]
 8004146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800414a:	6083      	str	r3, [r0, #8]
 800414c:	8181      	strh	r1, [r0, #12]
 800414e:	6643      	str	r3, [r0, #100]	; 0x64
 8004150:	81c2      	strh	r2, [r0, #14]
 8004152:	6183      	str	r3, [r0, #24]
 8004154:	4619      	mov	r1, r3
 8004156:	2208      	movs	r2, #8
 8004158:	305c      	adds	r0, #92	; 0x5c
 800415a:	f7ff ffcf 	bl	80040fc <memset>
 800415e:	4b05      	ldr	r3, [pc, #20]	; (8004174 <std+0x38>)
 8004160:	6263      	str	r3, [r4, #36]	; 0x24
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <std+0x3c>)
 8004164:	62a3      	str	r3, [r4, #40]	; 0x28
 8004166:	4b05      	ldr	r3, [pc, #20]	; (800417c <std+0x40>)
 8004168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800416a:	4b05      	ldr	r3, [pc, #20]	; (8004180 <std+0x44>)
 800416c:	6224      	str	r4, [r4, #32]
 800416e:	6323      	str	r3, [r4, #48]	; 0x30
 8004170:	bd10      	pop	{r4, pc}
 8004172:	bf00      	nop
 8004174:	08004a51 	.word	0x08004a51
 8004178:	08004a73 	.word	0x08004a73
 800417c:	08004aab 	.word	0x08004aab
 8004180:	08004acf 	.word	0x08004acf

08004184 <_cleanup_r>:
 8004184:	4901      	ldr	r1, [pc, #4]	; (800418c <_cleanup_r+0x8>)
 8004186:	f000 b8af 	b.w	80042e8 <_fwalk_reent>
 800418a:	bf00      	nop
 800418c:	08004da9 	.word	0x08004da9

08004190 <__sfmoreglue>:
 8004190:	b570      	push	{r4, r5, r6, lr}
 8004192:	2268      	movs	r2, #104	; 0x68
 8004194:	1e4d      	subs	r5, r1, #1
 8004196:	4355      	muls	r5, r2
 8004198:	460e      	mov	r6, r1
 800419a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800419e:	f000 f8e5 	bl	800436c <_malloc_r>
 80041a2:	4604      	mov	r4, r0
 80041a4:	b140      	cbz	r0, 80041b8 <__sfmoreglue+0x28>
 80041a6:	2100      	movs	r1, #0
 80041a8:	e9c0 1600 	strd	r1, r6, [r0]
 80041ac:	300c      	adds	r0, #12
 80041ae:	60a0      	str	r0, [r4, #8]
 80041b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80041b4:	f7ff ffa2 	bl	80040fc <memset>
 80041b8:	4620      	mov	r0, r4
 80041ba:	bd70      	pop	{r4, r5, r6, pc}

080041bc <__sfp_lock_acquire>:
 80041bc:	4801      	ldr	r0, [pc, #4]	; (80041c4 <__sfp_lock_acquire+0x8>)
 80041be:	f000 b8b3 	b.w	8004328 <__retarget_lock_acquire_recursive>
 80041c2:	bf00      	nop
 80041c4:	200001f1 	.word	0x200001f1

080041c8 <__sfp_lock_release>:
 80041c8:	4801      	ldr	r0, [pc, #4]	; (80041d0 <__sfp_lock_release+0x8>)
 80041ca:	f000 b8ae 	b.w	800432a <__retarget_lock_release_recursive>
 80041ce:	bf00      	nop
 80041d0:	200001f1 	.word	0x200001f1

080041d4 <__sinit_lock_acquire>:
 80041d4:	4801      	ldr	r0, [pc, #4]	; (80041dc <__sinit_lock_acquire+0x8>)
 80041d6:	f000 b8a7 	b.w	8004328 <__retarget_lock_acquire_recursive>
 80041da:	bf00      	nop
 80041dc:	200001f2 	.word	0x200001f2

080041e0 <__sinit_lock_release>:
 80041e0:	4801      	ldr	r0, [pc, #4]	; (80041e8 <__sinit_lock_release+0x8>)
 80041e2:	f000 b8a2 	b.w	800432a <__retarget_lock_release_recursive>
 80041e6:	bf00      	nop
 80041e8:	200001f2 	.word	0x200001f2

080041ec <__sinit>:
 80041ec:	b510      	push	{r4, lr}
 80041ee:	4604      	mov	r4, r0
 80041f0:	f7ff fff0 	bl	80041d4 <__sinit_lock_acquire>
 80041f4:	69a3      	ldr	r3, [r4, #24]
 80041f6:	b11b      	cbz	r3, 8004200 <__sinit+0x14>
 80041f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041fc:	f7ff bff0 	b.w	80041e0 <__sinit_lock_release>
 8004200:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004204:	6523      	str	r3, [r4, #80]	; 0x50
 8004206:	4b13      	ldr	r3, [pc, #76]	; (8004254 <__sinit+0x68>)
 8004208:	4a13      	ldr	r2, [pc, #76]	; (8004258 <__sinit+0x6c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	62a2      	str	r2, [r4, #40]	; 0x28
 800420e:	42a3      	cmp	r3, r4
 8004210:	bf04      	itt	eq
 8004212:	2301      	moveq	r3, #1
 8004214:	61a3      	streq	r3, [r4, #24]
 8004216:	4620      	mov	r0, r4
 8004218:	f000 f820 	bl	800425c <__sfp>
 800421c:	6060      	str	r0, [r4, #4]
 800421e:	4620      	mov	r0, r4
 8004220:	f000 f81c 	bl	800425c <__sfp>
 8004224:	60a0      	str	r0, [r4, #8]
 8004226:	4620      	mov	r0, r4
 8004228:	f000 f818 	bl	800425c <__sfp>
 800422c:	2200      	movs	r2, #0
 800422e:	60e0      	str	r0, [r4, #12]
 8004230:	2104      	movs	r1, #4
 8004232:	6860      	ldr	r0, [r4, #4]
 8004234:	f7ff ff82 	bl	800413c <std>
 8004238:	68a0      	ldr	r0, [r4, #8]
 800423a:	2201      	movs	r2, #1
 800423c:	2109      	movs	r1, #9
 800423e:	f7ff ff7d 	bl	800413c <std>
 8004242:	68e0      	ldr	r0, [r4, #12]
 8004244:	2202      	movs	r2, #2
 8004246:	2112      	movs	r1, #18
 8004248:	f7ff ff78 	bl	800413c <std>
 800424c:	2301      	movs	r3, #1
 800424e:	61a3      	str	r3, [r4, #24]
 8004250:	e7d2      	b.n	80041f8 <__sinit+0xc>
 8004252:	bf00      	nop
 8004254:	08005080 	.word	0x08005080
 8004258:	08004185 	.word	0x08004185

0800425c <__sfp>:
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	4607      	mov	r7, r0
 8004260:	f7ff ffac 	bl	80041bc <__sfp_lock_acquire>
 8004264:	4b1e      	ldr	r3, [pc, #120]	; (80042e0 <__sfp+0x84>)
 8004266:	681e      	ldr	r6, [r3, #0]
 8004268:	69b3      	ldr	r3, [r6, #24]
 800426a:	b913      	cbnz	r3, 8004272 <__sfp+0x16>
 800426c:	4630      	mov	r0, r6
 800426e:	f7ff ffbd 	bl	80041ec <__sinit>
 8004272:	3648      	adds	r6, #72	; 0x48
 8004274:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004278:	3b01      	subs	r3, #1
 800427a:	d503      	bpl.n	8004284 <__sfp+0x28>
 800427c:	6833      	ldr	r3, [r6, #0]
 800427e:	b30b      	cbz	r3, 80042c4 <__sfp+0x68>
 8004280:	6836      	ldr	r6, [r6, #0]
 8004282:	e7f7      	b.n	8004274 <__sfp+0x18>
 8004284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004288:	b9d5      	cbnz	r5, 80042c0 <__sfp+0x64>
 800428a:	4b16      	ldr	r3, [pc, #88]	; (80042e4 <__sfp+0x88>)
 800428c:	60e3      	str	r3, [r4, #12]
 800428e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004292:	6665      	str	r5, [r4, #100]	; 0x64
 8004294:	f000 f847 	bl	8004326 <__retarget_lock_init_recursive>
 8004298:	f7ff ff96 	bl	80041c8 <__sfp_lock_release>
 800429c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80042a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80042a4:	6025      	str	r5, [r4, #0]
 80042a6:	61a5      	str	r5, [r4, #24]
 80042a8:	2208      	movs	r2, #8
 80042aa:	4629      	mov	r1, r5
 80042ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80042b0:	f7ff ff24 	bl	80040fc <memset>
 80042b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80042b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80042bc:	4620      	mov	r0, r4
 80042be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042c0:	3468      	adds	r4, #104	; 0x68
 80042c2:	e7d9      	b.n	8004278 <__sfp+0x1c>
 80042c4:	2104      	movs	r1, #4
 80042c6:	4638      	mov	r0, r7
 80042c8:	f7ff ff62 	bl	8004190 <__sfmoreglue>
 80042cc:	4604      	mov	r4, r0
 80042ce:	6030      	str	r0, [r6, #0]
 80042d0:	2800      	cmp	r0, #0
 80042d2:	d1d5      	bne.n	8004280 <__sfp+0x24>
 80042d4:	f7ff ff78 	bl	80041c8 <__sfp_lock_release>
 80042d8:	230c      	movs	r3, #12
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	e7ee      	b.n	80042bc <__sfp+0x60>
 80042de:	bf00      	nop
 80042e0:	08005080 	.word	0x08005080
 80042e4:	ffff0001 	.word	0xffff0001

080042e8 <_fwalk_reent>:
 80042e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042ec:	4606      	mov	r6, r0
 80042ee:	4688      	mov	r8, r1
 80042f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80042f4:	2700      	movs	r7, #0
 80042f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042fa:	f1b9 0901 	subs.w	r9, r9, #1
 80042fe:	d505      	bpl.n	800430c <_fwalk_reent+0x24>
 8004300:	6824      	ldr	r4, [r4, #0]
 8004302:	2c00      	cmp	r4, #0
 8004304:	d1f7      	bne.n	80042f6 <_fwalk_reent+0xe>
 8004306:	4638      	mov	r0, r7
 8004308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800430c:	89ab      	ldrh	r3, [r5, #12]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d907      	bls.n	8004322 <_fwalk_reent+0x3a>
 8004312:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004316:	3301      	adds	r3, #1
 8004318:	d003      	beq.n	8004322 <_fwalk_reent+0x3a>
 800431a:	4629      	mov	r1, r5
 800431c:	4630      	mov	r0, r6
 800431e:	47c0      	blx	r8
 8004320:	4307      	orrs	r7, r0
 8004322:	3568      	adds	r5, #104	; 0x68
 8004324:	e7e9      	b.n	80042fa <_fwalk_reent+0x12>

08004326 <__retarget_lock_init_recursive>:
 8004326:	4770      	bx	lr

08004328 <__retarget_lock_acquire_recursive>:
 8004328:	4770      	bx	lr

0800432a <__retarget_lock_release_recursive>:
 800432a:	4770      	bx	lr

0800432c <sbrk_aligned>:
 800432c:	b570      	push	{r4, r5, r6, lr}
 800432e:	4e0e      	ldr	r6, [pc, #56]	; (8004368 <sbrk_aligned+0x3c>)
 8004330:	460c      	mov	r4, r1
 8004332:	6831      	ldr	r1, [r6, #0]
 8004334:	4605      	mov	r5, r0
 8004336:	b911      	cbnz	r1, 800433e <sbrk_aligned+0x12>
 8004338:	f000 fb7a 	bl	8004a30 <_sbrk_r>
 800433c:	6030      	str	r0, [r6, #0]
 800433e:	4621      	mov	r1, r4
 8004340:	4628      	mov	r0, r5
 8004342:	f000 fb75 	bl	8004a30 <_sbrk_r>
 8004346:	1c43      	adds	r3, r0, #1
 8004348:	d00a      	beq.n	8004360 <sbrk_aligned+0x34>
 800434a:	1cc4      	adds	r4, r0, #3
 800434c:	f024 0403 	bic.w	r4, r4, #3
 8004350:	42a0      	cmp	r0, r4
 8004352:	d007      	beq.n	8004364 <sbrk_aligned+0x38>
 8004354:	1a21      	subs	r1, r4, r0
 8004356:	4628      	mov	r0, r5
 8004358:	f000 fb6a 	bl	8004a30 <_sbrk_r>
 800435c:	3001      	adds	r0, #1
 800435e:	d101      	bne.n	8004364 <sbrk_aligned+0x38>
 8004360:	f04f 34ff 	mov.w	r4, #4294967295
 8004364:	4620      	mov	r0, r4
 8004366:	bd70      	pop	{r4, r5, r6, pc}
 8004368:	200001f8 	.word	0x200001f8

0800436c <_malloc_r>:
 800436c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004370:	1ccd      	adds	r5, r1, #3
 8004372:	f025 0503 	bic.w	r5, r5, #3
 8004376:	3508      	adds	r5, #8
 8004378:	2d0c      	cmp	r5, #12
 800437a:	bf38      	it	cc
 800437c:	250c      	movcc	r5, #12
 800437e:	2d00      	cmp	r5, #0
 8004380:	4607      	mov	r7, r0
 8004382:	db01      	blt.n	8004388 <_malloc_r+0x1c>
 8004384:	42a9      	cmp	r1, r5
 8004386:	d905      	bls.n	8004394 <_malloc_r+0x28>
 8004388:	230c      	movs	r3, #12
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	2600      	movs	r6, #0
 800438e:	4630      	mov	r0, r6
 8004390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004394:	4e2e      	ldr	r6, [pc, #184]	; (8004450 <_malloc_r+0xe4>)
 8004396:	f000 fdbb 	bl	8004f10 <__malloc_lock>
 800439a:	6833      	ldr	r3, [r6, #0]
 800439c:	461c      	mov	r4, r3
 800439e:	bb34      	cbnz	r4, 80043ee <_malloc_r+0x82>
 80043a0:	4629      	mov	r1, r5
 80043a2:	4638      	mov	r0, r7
 80043a4:	f7ff ffc2 	bl	800432c <sbrk_aligned>
 80043a8:	1c43      	adds	r3, r0, #1
 80043aa:	4604      	mov	r4, r0
 80043ac:	d14d      	bne.n	800444a <_malloc_r+0xde>
 80043ae:	6834      	ldr	r4, [r6, #0]
 80043b0:	4626      	mov	r6, r4
 80043b2:	2e00      	cmp	r6, #0
 80043b4:	d140      	bne.n	8004438 <_malloc_r+0xcc>
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	4631      	mov	r1, r6
 80043ba:	4638      	mov	r0, r7
 80043bc:	eb04 0803 	add.w	r8, r4, r3
 80043c0:	f000 fb36 	bl	8004a30 <_sbrk_r>
 80043c4:	4580      	cmp	r8, r0
 80043c6:	d13a      	bne.n	800443e <_malloc_r+0xd2>
 80043c8:	6821      	ldr	r1, [r4, #0]
 80043ca:	3503      	adds	r5, #3
 80043cc:	1a6d      	subs	r5, r5, r1
 80043ce:	f025 0503 	bic.w	r5, r5, #3
 80043d2:	3508      	adds	r5, #8
 80043d4:	2d0c      	cmp	r5, #12
 80043d6:	bf38      	it	cc
 80043d8:	250c      	movcc	r5, #12
 80043da:	4629      	mov	r1, r5
 80043dc:	4638      	mov	r0, r7
 80043de:	f7ff ffa5 	bl	800432c <sbrk_aligned>
 80043e2:	3001      	adds	r0, #1
 80043e4:	d02b      	beq.n	800443e <_malloc_r+0xd2>
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	442b      	add	r3, r5
 80043ea:	6023      	str	r3, [r4, #0]
 80043ec:	e00e      	b.n	800440c <_malloc_r+0xa0>
 80043ee:	6822      	ldr	r2, [r4, #0]
 80043f0:	1b52      	subs	r2, r2, r5
 80043f2:	d41e      	bmi.n	8004432 <_malloc_r+0xc6>
 80043f4:	2a0b      	cmp	r2, #11
 80043f6:	d916      	bls.n	8004426 <_malloc_r+0xba>
 80043f8:	1961      	adds	r1, r4, r5
 80043fa:	42a3      	cmp	r3, r4
 80043fc:	6025      	str	r5, [r4, #0]
 80043fe:	bf18      	it	ne
 8004400:	6059      	strne	r1, [r3, #4]
 8004402:	6863      	ldr	r3, [r4, #4]
 8004404:	bf08      	it	eq
 8004406:	6031      	streq	r1, [r6, #0]
 8004408:	5162      	str	r2, [r4, r5]
 800440a:	604b      	str	r3, [r1, #4]
 800440c:	4638      	mov	r0, r7
 800440e:	f104 060b 	add.w	r6, r4, #11
 8004412:	f000 fd83 	bl	8004f1c <__malloc_unlock>
 8004416:	f026 0607 	bic.w	r6, r6, #7
 800441a:	1d23      	adds	r3, r4, #4
 800441c:	1af2      	subs	r2, r6, r3
 800441e:	d0b6      	beq.n	800438e <_malloc_r+0x22>
 8004420:	1b9b      	subs	r3, r3, r6
 8004422:	50a3      	str	r3, [r4, r2]
 8004424:	e7b3      	b.n	800438e <_malloc_r+0x22>
 8004426:	6862      	ldr	r2, [r4, #4]
 8004428:	42a3      	cmp	r3, r4
 800442a:	bf0c      	ite	eq
 800442c:	6032      	streq	r2, [r6, #0]
 800442e:	605a      	strne	r2, [r3, #4]
 8004430:	e7ec      	b.n	800440c <_malloc_r+0xa0>
 8004432:	4623      	mov	r3, r4
 8004434:	6864      	ldr	r4, [r4, #4]
 8004436:	e7b2      	b.n	800439e <_malloc_r+0x32>
 8004438:	4634      	mov	r4, r6
 800443a:	6876      	ldr	r6, [r6, #4]
 800443c:	e7b9      	b.n	80043b2 <_malloc_r+0x46>
 800443e:	230c      	movs	r3, #12
 8004440:	603b      	str	r3, [r7, #0]
 8004442:	4638      	mov	r0, r7
 8004444:	f000 fd6a 	bl	8004f1c <__malloc_unlock>
 8004448:	e7a1      	b.n	800438e <_malloc_r+0x22>
 800444a:	6025      	str	r5, [r4, #0]
 800444c:	e7de      	b.n	800440c <_malloc_r+0xa0>
 800444e:	bf00      	nop
 8004450:	200001f4 	.word	0x200001f4

08004454 <__sfputc_r>:
 8004454:	6893      	ldr	r3, [r2, #8]
 8004456:	3b01      	subs	r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	b410      	push	{r4}
 800445c:	6093      	str	r3, [r2, #8]
 800445e:	da08      	bge.n	8004472 <__sfputc_r+0x1e>
 8004460:	6994      	ldr	r4, [r2, #24]
 8004462:	42a3      	cmp	r3, r4
 8004464:	db01      	blt.n	800446a <__sfputc_r+0x16>
 8004466:	290a      	cmp	r1, #10
 8004468:	d103      	bne.n	8004472 <__sfputc_r+0x1e>
 800446a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800446e:	f000 bb33 	b.w	8004ad8 <__swbuf_r>
 8004472:	6813      	ldr	r3, [r2, #0]
 8004474:	1c58      	adds	r0, r3, #1
 8004476:	6010      	str	r0, [r2, #0]
 8004478:	7019      	strb	r1, [r3, #0]
 800447a:	4608      	mov	r0, r1
 800447c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004480:	4770      	bx	lr

08004482 <__sfputs_r>:
 8004482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004484:	4606      	mov	r6, r0
 8004486:	460f      	mov	r7, r1
 8004488:	4614      	mov	r4, r2
 800448a:	18d5      	adds	r5, r2, r3
 800448c:	42ac      	cmp	r4, r5
 800448e:	d101      	bne.n	8004494 <__sfputs_r+0x12>
 8004490:	2000      	movs	r0, #0
 8004492:	e007      	b.n	80044a4 <__sfputs_r+0x22>
 8004494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004498:	463a      	mov	r2, r7
 800449a:	4630      	mov	r0, r6
 800449c:	f7ff ffda 	bl	8004454 <__sfputc_r>
 80044a0:	1c43      	adds	r3, r0, #1
 80044a2:	d1f3      	bne.n	800448c <__sfputs_r+0xa>
 80044a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044a8 <_vfiprintf_r>:
 80044a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ac:	460d      	mov	r5, r1
 80044ae:	b09d      	sub	sp, #116	; 0x74
 80044b0:	4614      	mov	r4, r2
 80044b2:	4698      	mov	r8, r3
 80044b4:	4606      	mov	r6, r0
 80044b6:	b118      	cbz	r0, 80044c0 <_vfiprintf_r+0x18>
 80044b8:	6983      	ldr	r3, [r0, #24]
 80044ba:	b90b      	cbnz	r3, 80044c0 <_vfiprintf_r+0x18>
 80044bc:	f7ff fe96 	bl	80041ec <__sinit>
 80044c0:	4b89      	ldr	r3, [pc, #548]	; (80046e8 <_vfiprintf_r+0x240>)
 80044c2:	429d      	cmp	r5, r3
 80044c4:	d11b      	bne.n	80044fe <_vfiprintf_r+0x56>
 80044c6:	6875      	ldr	r5, [r6, #4]
 80044c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044ca:	07d9      	lsls	r1, r3, #31
 80044cc:	d405      	bmi.n	80044da <_vfiprintf_r+0x32>
 80044ce:	89ab      	ldrh	r3, [r5, #12]
 80044d0:	059a      	lsls	r2, r3, #22
 80044d2:	d402      	bmi.n	80044da <_vfiprintf_r+0x32>
 80044d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044d6:	f7ff ff27 	bl	8004328 <__retarget_lock_acquire_recursive>
 80044da:	89ab      	ldrh	r3, [r5, #12]
 80044dc:	071b      	lsls	r3, r3, #28
 80044de:	d501      	bpl.n	80044e4 <_vfiprintf_r+0x3c>
 80044e0:	692b      	ldr	r3, [r5, #16]
 80044e2:	b9eb      	cbnz	r3, 8004520 <_vfiprintf_r+0x78>
 80044e4:	4629      	mov	r1, r5
 80044e6:	4630      	mov	r0, r6
 80044e8:	f000 fb5a 	bl	8004ba0 <__swsetup_r>
 80044ec:	b1c0      	cbz	r0, 8004520 <_vfiprintf_r+0x78>
 80044ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044f0:	07dc      	lsls	r4, r3, #31
 80044f2:	d50e      	bpl.n	8004512 <_vfiprintf_r+0x6a>
 80044f4:	f04f 30ff 	mov.w	r0, #4294967295
 80044f8:	b01d      	add	sp, #116	; 0x74
 80044fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044fe:	4b7b      	ldr	r3, [pc, #492]	; (80046ec <_vfiprintf_r+0x244>)
 8004500:	429d      	cmp	r5, r3
 8004502:	d101      	bne.n	8004508 <_vfiprintf_r+0x60>
 8004504:	68b5      	ldr	r5, [r6, #8]
 8004506:	e7df      	b.n	80044c8 <_vfiprintf_r+0x20>
 8004508:	4b79      	ldr	r3, [pc, #484]	; (80046f0 <_vfiprintf_r+0x248>)
 800450a:	429d      	cmp	r5, r3
 800450c:	bf08      	it	eq
 800450e:	68f5      	ldreq	r5, [r6, #12]
 8004510:	e7da      	b.n	80044c8 <_vfiprintf_r+0x20>
 8004512:	89ab      	ldrh	r3, [r5, #12]
 8004514:	0598      	lsls	r0, r3, #22
 8004516:	d4ed      	bmi.n	80044f4 <_vfiprintf_r+0x4c>
 8004518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800451a:	f7ff ff06 	bl	800432a <__retarget_lock_release_recursive>
 800451e:	e7e9      	b.n	80044f4 <_vfiprintf_r+0x4c>
 8004520:	2300      	movs	r3, #0
 8004522:	9309      	str	r3, [sp, #36]	; 0x24
 8004524:	2320      	movs	r3, #32
 8004526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800452a:	f8cd 800c 	str.w	r8, [sp, #12]
 800452e:	2330      	movs	r3, #48	; 0x30
 8004530:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80046f4 <_vfiprintf_r+0x24c>
 8004534:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004538:	f04f 0901 	mov.w	r9, #1
 800453c:	4623      	mov	r3, r4
 800453e:	469a      	mov	sl, r3
 8004540:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004544:	b10a      	cbz	r2, 800454a <_vfiprintf_r+0xa2>
 8004546:	2a25      	cmp	r2, #37	; 0x25
 8004548:	d1f9      	bne.n	800453e <_vfiprintf_r+0x96>
 800454a:	ebba 0b04 	subs.w	fp, sl, r4
 800454e:	d00b      	beq.n	8004568 <_vfiprintf_r+0xc0>
 8004550:	465b      	mov	r3, fp
 8004552:	4622      	mov	r2, r4
 8004554:	4629      	mov	r1, r5
 8004556:	4630      	mov	r0, r6
 8004558:	f7ff ff93 	bl	8004482 <__sfputs_r>
 800455c:	3001      	adds	r0, #1
 800455e:	f000 80aa 	beq.w	80046b6 <_vfiprintf_r+0x20e>
 8004562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004564:	445a      	add	r2, fp
 8004566:	9209      	str	r2, [sp, #36]	; 0x24
 8004568:	f89a 3000 	ldrb.w	r3, [sl]
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80a2 	beq.w	80046b6 <_vfiprintf_r+0x20e>
 8004572:	2300      	movs	r3, #0
 8004574:	f04f 32ff 	mov.w	r2, #4294967295
 8004578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800457c:	f10a 0a01 	add.w	sl, sl, #1
 8004580:	9304      	str	r3, [sp, #16]
 8004582:	9307      	str	r3, [sp, #28]
 8004584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004588:	931a      	str	r3, [sp, #104]	; 0x68
 800458a:	4654      	mov	r4, sl
 800458c:	2205      	movs	r2, #5
 800458e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004592:	4858      	ldr	r0, [pc, #352]	; (80046f4 <_vfiprintf_r+0x24c>)
 8004594:	f7fb fe2c 	bl	80001f0 <memchr>
 8004598:	9a04      	ldr	r2, [sp, #16]
 800459a:	b9d8      	cbnz	r0, 80045d4 <_vfiprintf_r+0x12c>
 800459c:	06d1      	lsls	r1, r2, #27
 800459e:	bf44      	itt	mi
 80045a0:	2320      	movmi	r3, #32
 80045a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045a6:	0713      	lsls	r3, r2, #28
 80045a8:	bf44      	itt	mi
 80045aa:	232b      	movmi	r3, #43	; 0x2b
 80045ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045b0:	f89a 3000 	ldrb.w	r3, [sl]
 80045b4:	2b2a      	cmp	r3, #42	; 0x2a
 80045b6:	d015      	beq.n	80045e4 <_vfiprintf_r+0x13c>
 80045b8:	9a07      	ldr	r2, [sp, #28]
 80045ba:	4654      	mov	r4, sl
 80045bc:	2000      	movs	r0, #0
 80045be:	f04f 0c0a 	mov.w	ip, #10
 80045c2:	4621      	mov	r1, r4
 80045c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045c8:	3b30      	subs	r3, #48	; 0x30
 80045ca:	2b09      	cmp	r3, #9
 80045cc:	d94e      	bls.n	800466c <_vfiprintf_r+0x1c4>
 80045ce:	b1b0      	cbz	r0, 80045fe <_vfiprintf_r+0x156>
 80045d0:	9207      	str	r2, [sp, #28]
 80045d2:	e014      	b.n	80045fe <_vfiprintf_r+0x156>
 80045d4:	eba0 0308 	sub.w	r3, r0, r8
 80045d8:	fa09 f303 	lsl.w	r3, r9, r3
 80045dc:	4313      	orrs	r3, r2
 80045de:	9304      	str	r3, [sp, #16]
 80045e0:	46a2      	mov	sl, r4
 80045e2:	e7d2      	b.n	800458a <_vfiprintf_r+0xe2>
 80045e4:	9b03      	ldr	r3, [sp, #12]
 80045e6:	1d19      	adds	r1, r3, #4
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	9103      	str	r1, [sp, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bfbb      	ittet	lt
 80045f0:	425b      	neglt	r3, r3
 80045f2:	f042 0202 	orrlt.w	r2, r2, #2
 80045f6:	9307      	strge	r3, [sp, #28]
 80045f8:	9307      	strlt	r3, [sp, #28]
 80045fa:	bfb8      	it	lt
 80045fc:	9204      	strlt	r2, [sp, #16]
 80045fe:	7823      	ldrb	r3, [r4, #0]
 8004600:	2b2e      	cmp	r3, #46	; 0x2e
 8004602:	d10c      	bne.n	800461e <_vfiprintf_r+0x176>
 8004604:	7863      	ldrb	r3, [r4, #1]
 8004606:	2b2a      	cmp	r3, #42	; 0x2a
 8004608:	d135      	bne.n	8004676 <_vfiprintf_r+0x1ce>
 800460a:	9b03      	ldr	r3, [sp, #12]
 800460c:	1d1a      	adds	r2, r3, #4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	9203      	str	r2, [sp, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	bfb8      	it	lt
 8004616:	f04f 33ff 	movlt.w	r3, #4294967295
 800461a:	3402      	adds	r4, #2
 800461c:	9305      	str	r3, [sp, #20]
 800461e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004704 <_vfiprintf_r+0x25c>
 8004622:	7821      	ldrb	r1, [r4, #0]
 8004624:	2203      	movs	r2, #3
 8004626:	4650      	mov	r0, sl
 8004628:	f7fb fde2 	bl	80001f0 <memchr>
 800462c:	b140      	cbz	r0, 8004640 <_vfiprintf_r+0x198>
 800462e:	2340      	movs	r3, #64	; 0x40
 8004630:	eba0 000a 	sub.w	r0, r0, sl
 8004634:	fa03 f000 	lsl.w	r0, r3, r0
 8004638:	9b04      	ldr	r3, [sp, #16]
 800463a:	4303      	orrs	r3, r0
 800463c:	3401      	adds	r4, #1
 800463e:	9304      	str	r3, [sp, #16]
 8004640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004644:	482c      	ldr	r0, [pc, #176]	; (80046f8 <_vfiprintf_r+0x250>)
 8004646:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800464a:	2206      	movs	r2, #6
 800464c:	f7fb fdd0 	bl	80001f0 <memchr>
 8004650:	2800      	cmp	r0, #0
 8004652:	d03f      	beq.n	80046d4 <_vfiprintf_r+0x22c>
 8004654:	4b29      	ldr	r3, [pc, #164]	; (80046fc <_vfiprintf_r+0x254>)
 8004656:	bb1b      	cbnz	r3, 80046a0 <_vfiprintf_r+0x1f8>
 8004658:	9b03      	ldr	r3, [sp, #12]
 800465a:	3307      	adds	r3, #7
 800465c:	f023 0307 	bic.w	r3, r3, #7
 8004660:	3308      	adds	r3, #8
 8004662:	9303      	str	r3, [sp, #12]
 8004664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004666:	443b      	add	r3, r7
 8004668:	9309      	str	r3, [sp, #36]	; 0x24
 800466a:	e767      	b.n	800453c <_vfiprintf_r+0x94>
 800466c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004670:	460c      	mov	r4, r1
 8004672:	2001      	movs	r0, #1
 8004674:	e7a5      	b.n	80045c2 <_vfiprintf_r+0x11a>
 8004676:	2300      	movs	r3, #0
 8004678:	3401      	adds	r4, #1
 800467a:	9305      	str	r3, [sp, #20]
 800467c:	4619      	mov	r1, r3
 800467e:	f04f 0c0a 	mov.w	ip, #10
 8004682:	4620      	mov	r0, r4
 8004684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004688:	3a30      	subs	r2, #48	; 0x30
 800468a:	2a09      	cmp	r2, #9
 800468c:	d903      	bls.n	8004696 <_vfiprintf_r+0x1ee>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0c5      	beq.n	800461e <_vfiprintf_r+0x176>
 8004692:	9105      	str	r1, [sp, #20]
 8004694:	e7c3      	b.n	800461e <_vfiprintf_r+0x176>
 8004696:	fb0c 2101 	mla	r1, ip, r1, r2
 800469a:	4604      	mov	r4, r0
 800469c:	2301      	movs	r3, #1
 800469e:	e7f0      	b.n	8004682 <_vfiprintf_r+0x1da>
 80046a0:	ab03      	add	r3, sp, #12
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	462a      	mov	r2, r5
 80046a6:	4b16      	ldr	r3, [pc, #88]	; (8004700 <_vfiprintf_r+0x258>)
 80046a8:	a904      	add	r1, sp, #16
 80046aa:	4630      	mov	r0, r6
 80046ac:	f3af 8000 	nop.w
 80046b0:	4607      	mov	r7, r0
 80046b2:	1c78      	adds	r0, r7, #1
 80046b4:	d1d6      	bne.n	8004664 <_vfiprintf_r+0x1bc>
 80046b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046b8:	07d9      	lsls	r1, r3, #31
 80046ba:	d405      	bmi.n	80046c8 <_vfiprintf_r+0x220>
 80046bc:	89ab      	ldrh	r3, [r5, #12]
 80046be:	059a      	lsls	r2, r3, #22
 80046c0:	d402      	bmi.n	80046c8 <_vfiprintf_r+0x220>
 80046c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046c4:	f7ff fe31 	bl	800432a <__retarget_lock_release_recursive>
 80046c8:	89ab      	ldrh	r3, [r5, #12]
 80046ca:	065b      	lsls	r3, r3, #25
 80046cc:	f53f af12 	bmi.w	80044f4 <_vfiprintf_r+0x4c>
 80046d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046d2:	e711      	b.n	80044f8 <_vfiprintf_r+0x50>
 80046d4:	ab03      	add	r3, sp, #12
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	462a      	mov	r2, r5
 80046da:	4b09      	ldr	r3, [pc, #36]	; (8004700 <_vfiprintf_r+0x258>)
 80046dc:	a904      	add	r1, sp, #16
 80046de:	4630      	mov	r0, r6
 80046e0:	f000 f880 	bl	80047e4 <_printf_i>
 80046e4:	e7e4      	b.n	80046b0 <_vfiprintf_r+0x208>
 80046e6:	bf00      	nop
 80046e8:	080050a4 	.word	0x080050a4
 80046ec:	080050c4 	.word	0x080050c4
 80046f0:	08005084 	.word	0x08005084
 80046f4:	080050e4 	.word	0x080050e4
 80046f8:	080050ee 	.word	0x080050ee
 80046fc:	00000000 	.word	0x00000000
 8004700:	08004483 	.word	0x08004483
 8004704:	080050ea 	.word	0x080050ea

08004708 <_printf_common>:
 8004708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800470c:	4616      	mov	r6, r2
 800470e:	4699      	mov	r9, r3
 8004710:	688a      	ldr	r2, [r1, #8]
 8004712:	690b      	ldr	r3, [r1, #16]
 8004714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004718:	4293      	cmp	r3, r2
 800471a:	bfb8      	it	lt
 800471c:	4613      	movlt	r3, r2
 800471e:	6033      	str	r3, [r6, #0]
 8004720:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004724:	4607      	mov	r7, r0
 8004726:	460c      	mov	r4, r1
 8004728:	b10a      	cbz	r2, 800472e <_printf_common+0x26>
 800472a:	3301      	adds	r3, #1
 800472c:	6033      	str	r3, [r6, #0]
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	0699      	lsls	r1, r3, #26
 8004732:	bf42      	ittt	mi
 8004734:	6833      	ldrmi	r3, [r6, #0]
 8004736:	3302      	addmi	r3, #2
 8004738:	6033      	strmi	r3, [r6, #0]
 800473a:	6825      	ldr	r5, [r4, #0]
 800473c:	f015 0506 	ands.w	r5, r5, #6
 8004740:	d106      	bne.n	8004750 <_printf_common+0x48>
 8004742:	f104 0a19 	add.w	sl, r4, #25
 8004746:	68e3      	ldr	r3, [r4, #12]
 8004748:	6832      	ldr	r2, [r6, #0]
 800474a:	1a9b      	subs	r3, r3, r2
 800474c:	42ab      	cmp	r3, r5
 800474e:	dc26      	bgt.n	800479e <_printf_common+0x96>
 8004750:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004754:	1e13      	subs	r3, r2, #0
 8004756:	6822      	ldr	r2, [r4, #0]
 8004758:	bf18      	it	ne
 800475a:	2301      	movne	r3, #1
 800475c:	0692      	lsls	r2, r2, #26
 800475e:	d42b      	bmi.n	80047b8 <_printf_common+0xb0>
 8004760:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004764:	4649      	mov	r1, r9
 8004766:	4638      	mov	r0, r7
 8004768:	47c0      	blx	r8
 800476a:	3001      	adds	r0, #1
 800476c:	d01e      	beq.n	80047ac <_printf_common+0xa4>
 800476e:	6823      	ldr	r3, [r4, #0]
 8004770:	68e5      	ldr	r5, [r4, #12]
 8004772:	6832      	ldr	r2, [r6, #0]
 8004774:	f003 0306 	and.w	r3, r3, #6
 8004778:	2b04      	cmp	r3, #4
 800477a:	bf08      	it	eq
 800477c:	1aad      	subeq	r5, r5, r2
 800477e:	68a3      	ldr	r3, [r4, #8]
 8004780:	6922      	ldr	r2, [r4, #16]
 8004782:	bf0c      	ite	eq
 8004784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004788:	2500      	movne	r5, #0
 800478a:	4293      	cmp	r3, r2
 800478c:	bfc4      	itt	gt
 800478e:	1a9b      	subgt	r3, r3, r2
 8004790:	18ed      	addgt	r5, r5, r3
 8004792:	2600      	movs	r6, #0
 8004794:	341a      	adds	r4, #26
 8004796:	42b5      	cmp	r5, r6
 8004798:	d11a      	bne.n	80047d0 <_printf_common+0xc8>
 800479a:	2000      	movs	r0, #0
 800479c:	e008      	b.n	80047b0 <_printf_common+0xa8>
 800479e:	2301      	movs	r3, #1
 80047a0:	4652      	mov	r2, sl
 80047a2:	4649      	mov	r1, r9
 80047a4:	4638      	mov	r0, r7
 80047a6:	47c0      	blx	r8
 80047a8:	3001      	adds	r0, #1
 80047aa:	d103      	bne.n	80047b4 <_printf_common+0xac>
 80047ac:	f04f 30ff 	mov.w	r0, #4294967295
 80047b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b4:	3501      	adds	r5, #1
 80047b6:	e7c6      	b.n	8004746 <_printf_common+0x3e>
 80047b8:	18e1      	adds	r1, r4, r3
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	2030      	movs	r0, #48	; 0x30
 80047be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047c2:	4422      	add	r2, r4
 80047c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047cc:	3302      	adds	r3, #2
 80047ce:	e7c7      	b.n	8004760 <_printf_common+0x58>
 80047d0:	2301      	movs	r3, #1
 80047d2:	4622      	mov	r2, r4
 80047d4:	4649      	mov	r1, r9
 80047d6:	4638      	mov	r0, r7
 80047d8:	47c0      	blx	r8
 80047da:	3001      	adds	r0, #1
 80047dc:	d0e6      	beq.n	80047ac <_printf_common+0xa4>
 80047de:	3601      	adds	r6, #1
 80047e0:	e7d9      	b.n	8004796 <_printf_common+0x8e>
	...

080047e4 <_printf_i>:
 80047e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047e8:	7e0f      	ldrb	r7, [r1, #24]
 80047ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047ec:	2f78      	cmp	r7, #120	; 0x78
 80047ee:	4691      	mov	r9, r2
 80047f0:	4680      	mov	r8, r0
 80047f2:	460c      	mov	r4, r1
 80047f4:	469a      	mov	sl, r3
 80047f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047fa:	d807      	bhi.n	800480c <_printf_i+0x28>
 80047fc:	2f62      	cmp	r7, #98	; 0x62
 80047fe:	d80a      	bhi.n	8004816 <_printf_i+0x32>
 8004800:	2f00      	cmp	r7, #0
 8004802:	f000 80d8 	beq.w	80049b6 <_printf_i+0x1d2>
 8004806:	2f58      	cmp	r7, #88	; 0x58
 8004808:	f000 80a3 	beq.w	8004952 <_printf_i+0x16e>
 800480c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004810:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004814:	e03a      	b.n	800488c <_printf_i+0xa8>
 8004816:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800481a:	2b15      	cmp	r3, #21
 800481c:	d8f6      	bhi.n	800480c <_printf_i+0x28>
 800481e:	a101      	add	r1, pc, #4	; (adr r1, 8004824 <_printf_i+0x40>)
 8004820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004824:	0800487d 	.word	0x0800487d
 8004828:	08004891 	.word	0x08004891
 800482c:	0800480d 	.word	0x0800480d
 8004830:	0800480d 	.word	0x0800480d
 8004834:	0800480d 	.word	0x0800480d
 8004838:	0800480d 	.word	0x0800480d
 800483c:	08004891 	.word	0x08004891
 8004840:	0800480d 	.word	0x0800480d
 8004844:	0800480d 	.word	0x0800480d
 8004848:	0800480d 	.word	0x0800480d
 800484c:	0800480d 	.word	0x0800480d
 8004850:	0800499d 	.word	0x0800499d
 8004854:	080048c1 	.word	0x080048c1
 8004858:	0800497f 	.word	0x0800497f
 800485c:	0800480d 	.word	0x0800480d
 8004860:	0800480d 	.word	0x0800480d
 8004864:	080049bf 	.word	0x080049bf
 8004868:	0800480d 	.word	0x0800480d
 800486c:	080048c1 	.word	0x080048c1
 8004870:	0800480d 	.word	0x0800480d
 8004874:	0800480d 	.word	0x0800480d
 8004878:	08004987 	.word	0x08004987
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	1d1a      	adds	r2, r3, #4
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	602a      	str	r2, [r5, #0]
 8004884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800488c:	2301      	movs	r3, #1
 800488e:	e0a3      	b.n	80049d8 <_printf_i+0x1f4>
 8004890:	6820      	ldr	r0, [r4, #0]
 8004892:	6829      	ldr	r1, [r5, #0]
 8004894:	0606      	lsls	r6, r0, #24
 8004896:	f101 0304 	add.w	r3, r1, #4
 800489a:	d50a      	bpl.n	80048b2 <_printf_i+0xce>
 800489c:	680e      	ldr	r6, [r1, #0]
 800489e:	602b      	str	r3, [r5, #0]
 80048a0:	2e00      	cmp	r6, #0
 80048a2:	da03      	bge.n	80048ac <_printf_i+0xc8>
 80048a4:	232d      	movs	r3, #45	; 0x2d
 80048a6:	4276      	negs	r6, r6
 80048a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048ac:	485e      	ldr	r0, [pc, #376]	; (8004a28 <_printf_i+0x244>)
 80048ae:	230a      	movs	r3, #10
 80048b0:	e019      	b.n	80048e6 <_printf_i+0x102>
 80048b2:	680e      	ldr	r6, [r1, #0]
 80048b4:	602b      	str	r3, [r5, #0]
 80048b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048ba:	bf18      	it	ne
 80048bc:	b236      	sxthne	r6, r6
 80048be:	e7ef      	b.n	80048a0 <_printf_i+0xbc>
 80048c0:	682b      	ldr	r3, [r5, #0]
 80048c2:	6820      	ldr	r0, [r4, #0]
 80048c4:	1d19      	adds	r1, r3, #4
 80048c6:	6029      	str	r1, [r5, #0]
 80048c8:	0601      	lsls	r1, r0, #24
 80048ca:	d501      	bpl.n	80048d0 <_printf_i+0xec>
 80048cc:	681e      	ldr	r6, [r3, #0]
 80048ce:	e002      	b.n	80048d6 <_printf_i+0xf2>
 80048d0:	0646      	lsls	r6, r0, #25
 80048d2:	d5fb      	bpl.n	80048cc <_printf_i+0xe8>
 80048d4:	881e      	ldrh	r6, [r3, #0]
 80048d6:	4854      	ldr	r0, [pc, #336]	; (8004a28 <_printf_i+0x244>)
 80048d8:	2f6f      	cmp	r7, #111	; 0x6f
 80048da:	bf0c      	ite	eq
 80048dc:	2308      	moveq	r3, #8
 80048de:	230a      	movne	r3, #10
 80048e0:	2100      	movs	r1, #0
 80048e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048e6:	6865      	ldr	r5, [r4, #4]
 80048e8:	60a5      	str	r5, [r4, #8]
 80048ea:	2d00      	cmp	r5, #0
 80048ec:	bfa2      	ittt	ge
 80048ee:	6821      	ldrge	r1, [r4, #0]
 80048f0:	f021 0104 	bicge.w	r1, r1, #4
 80048f4:	6021      	strge	r1, [r4, #0]
 80048f6:	b90e      	cbnz	r6, 80048fc <_printf_i+0x118>
 80048f8:	2d00      	cmp	r5, #0
 80048fa:	d04d      	beq.n	8004998 <_printf_i+0x1b4>
 80048fc:	4615      	mov	r5, r2
 80048fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004902:	fb03 6711 	mls	r7, r3, r1, r6
 8004906:	5dc7      	ldrb	r7, [r0, r7]
 8004908:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800490c:	4637      	mov	r7, r6
 800490e:	42bb      	cmp	r3, r7
 8004910:	460e      	mov	r6, r1
 8004912:	d9f4      	bls.n	80048fe <_printf_i+0x11a>
 8004914:	2b08      	cmp	r3, #8
 8004916:	d10b      	bne.n	8004930 <_printf_i+0x14c>
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	07de      	lsls	r6, r3, #31
 800491c:	d508      	bpl.n	8004930 <_printf_i+0x14c>
 800491e:	6923      	ldr	r3, [r4, #16]
 8004920:	6861      	ldr	r1, [r4, #4]
 8004922:	4299      	cmp	r1, r3
 8004924:	bfde      	ittt	le
 8004926:	2330      	movle	r3, #48	; 0x30
 8004928:	f805 3c01 	strble.w	r3, [r5, #-1]
 800492c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004930:	1b52      	subs	r2, r2, r5
 8004932:	6122      	str	r2, [r4, #16]
 8004934:	f8cd a000 	str.w	sl, [sp]
 8004938:	464b      	mov	r3, r9
 800493a:	aa03      	add	r2, sp, #12
 800493c:	4621      	mov	r1, r4
 800493e:	4640      	mov	r0, r8
 8004940:	f7ff fee2 	bl	8004708 <_printf_common>
 8004944:	3001      	adds	r0, #1
 8004946:	d14c      	bne.n	80049e2 <_printf_i+0x1fe>
 8004948:	f04f 30ff 	mov.w	r0, #4294967295
 800494c:	b004      	add	sp, #16
 800494e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004952:	4835      	ldr	r0, [pc, #212]	; (8004a28 <_printf_i+0x244>)
 8004954:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004958:	6829      	ldr	r1, [r5, #0]
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004960:	6029      	str	r1, [r5, #0]
 8004962:	061d      	lsls	r5, r3, #24
 8004964:	d514      	bpl.n	8004990 <_printf_i+0x1ac>
 8004966:	07df      	lsls	r7, r3, #31
 8004968:	bf44      	itt	mi
 800496a:	f043 0320 	orrmi.w	r3, r3, #32
 800496e:	6023      	strmi	r3, [r4, #0]
 8004970:	b91e      	cbnz	r6, 800497a <_printf_i+0x196>
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	f023 0320 	bic.w	r3, r3, #32
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	2310      	movs	r3, #16
 800497c:	e7b0      	b.n	80048e0 <_printf_i+0xfc>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	f043 0320 	orr.w	r3, r3, #32
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	2378      	movs	r3, #120	; 0x78
 8004988:	4828      	ldr	r0, [pc, #160]	; (8004a2c <_printf_i+0x248>)
 800498a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800498e:	e7e3      	b.n	8004958 <_printf_i+0x174>
 8004990:	0659      	lsls	r1, r3, #25
 8004992:	bf48      	it	mi
 8004994:	b2b6      	uxthmi	r6, r6
 8004996:	e7e6      	b.n	8004966 <_printf_i+0x182>
 8004998:	4615      	mov	r5, r2
 800499a:	e7bb      	b.n	8004914 <_printf_i+0x130>
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	6826      	ldr	r6, [r4, #0]
 80049a0:	6961      	ldr	r1, [r4, #20]
 80049a2:	1d18      	adds	r0, r3, #4
 80049a4:	6028      	str	r0, [r5, #0]
 80049a6:	0635      	lsls	r5, r6, #24
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	d501      	bpl.n	80049b0 <_printf_i+0x1cc>
 80049ac:	6019      	str	r1, [r3, #0]
 80049ae:	e002      	b.n	80049b6 <_printf_i+0x1d2>
 80049b0:	0670      	lsls	r0, r6, #25
 80049b2:	d5fb      	bpl.n	80049ac <_printf_i+0x1c8>
 80049b4:	8019      	strh	r1, [r3, #0]
 80049b6:	2300      	movs	r3, #0
 80049b8:	6123      	str	r3, [r4, #16]
 80049ba:	4615      	mov	r5, r2
 80049bc:	e7ba      	b.n	8004934 <_printf_i+0x150>
 80049be:	682b      	ldr	r3, [r5, #0]
 80049c0:	1d1a      	adds	r2, r3, #4
 80049c2:	602a      	str	r2, [r5, #0]
 80049c4:	681d      	ldr	r5, [r3, #0]
 80049c6:	6862      	ldr	r2, [r4, #4]
 80049c8:	2100      	movs	r1, #0
 80049ca:	4628      	mov	r0, r5
 80049cc:	f7fb fc10 	bl	80001f0 <memchr>
 80049d0:	b108      	cbz	r0, 80049d6 <_printf_i+0x1f2>
 80049d2:	1b40      	subs	r0, r0, r5
 80049d4:	6060      	str	r0, [r4, #4]
 80049d6:	6863      	ldr	r3, [r4, #4]
 80049d8:	6123      	str	r3, [r4, #16]
 80049da:	2300      	movs	r3, #0
 80049dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049e0:	e7a8      	b.n	8004934 <_printf_i+0x150>
 80049e2:	6923      	ldr	r3, [r4, #16]
 80049e4:	462a      	mov	r2, r5
 80049e6:	4649      	mov	r1, r9
 80049e8:	4640      	mov	r0, r8
 80049ea:	47d0      	blx	sl
 80049ec:	3001      	adds	r0, #1
 80049ee:	d0ab      	beq.n	8004948 <_printf_i+0x164>
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	079b      	lsls	r3, r3, #30
 80049f4:	d413      	bmi.n	8004a1e <_printf_i+0x23a>
 80049f6:	68e0      	ldr	r0, [r4, #12]
 80049f8:	9b03      	ldr	r3, [sp, #12]
 80049fa:	4298      	cmp	r0, r3
 80049fc:	bfb8      	it	lt
 80049fe:	4618      	movlt	r0, r3
 8004a00:	e7a4      	b.n	800494c <_printf_i+0x168>
 8004a02:	2301      	movs	r3, #1
 8004a04:	4632      	mov	r2, r6
 8004a06:	4649      	mov	r1, r9
 8004a08:	4640      	mov	r0, r8
 8004a0a:	47d0      	blx	sl
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	d09b      	beq.n	8004948 <_printf_i+0x164>
 8004a10:	3501      	adds	r5, #1
 8004a12:	68e3      	ldr	r3, [r4, #12]
 8004a14:	9903      	ldr	r1, [sp, #12]
 8004a16:	1a5b      	subs	r3, r3, r1
 8004a18:	42ab      	cmp	r3, r5
 8004a1a:	dcf2      	bgt.n	8004a02 <_printf_i+0x21e>
 8004a1c:	e7eb      	b.n	80049f6 <_printf_i+0x212>
 8004a1e:	2500      	movs	r5, #0
 8004a20:	f104 0619 	add.w	r6, r4, #25
 8004a24:	e7f5      	b.n	8004a12 <_printf_i+0x22e>
 8004a26:	bf00      	nop
 8004a28:	080050f5 	.word	0x080050f5
 8004a2c:	08005106 	.word	0x08005106

08004a30 <_sbrk_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	4d06      	ldr	r5, [pc, #24]	; (8004a4c <_sbrk_r+0x1c>)
 8004a34:	2300      	movs	r3, #0
 8004a36:	4604      	mov	r4, r0
 8004a38:	4608      	mov	r0, r1
 8004a3a:	602b      	str	r3, [r5, #0]
 8004a3c:	f7fc fb98 	bl	8001170 <_sbrk>
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	d102      	bne.n	8004a4a <_sbrk_r+0x1a>
 8004a44:	682b      	ldr	r3, [r5, #0]
 8004a46:	b103      	cbz	r3, 8004a4a <_sbrk_r+0x1a>
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	200001fc 	.word	0x200001fc

08004a50 <__sread>:
 8004a50:	b510      	push	{r4, lr}
 8004a52:	460c      	mov	r4, r1
 8004a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a58:	f000 fab2 	bl	8004fc0 <_read_r>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	bfab      	itete	ge
 8004a60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a62:	89a3      	ldrhlt	r3, [r4, #12]
 8004a64:	181b      	addge	r3, r3, r0
 8004a66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a6a:	bfac      	ite	ge
 8004a6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a6e:	81a3      	strhlt	r3, [r4, #12]
 8004a70:	bd10      	pop	{r4, pc}

08004a72 <__swrite>:
 8004a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a76:	461f      	mov	r7, r3
 8004a78:	898b      	ldrh	r3, [r1, #12]
 8004a7a:	05db      	lsls	r3, r3, #23
 8004a7c:	4605      	mov	r5, r0
 8004a7e:	460c      	mov	r4, r1
 8004a80:	4616      	mov	r6, r2
 8004a82:	d505      	bpl.n	8004a90 <__swrite+0x1e>
 8004a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a88:	2302      	movs	r3, #2
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f000 f9c8 	bl	8004e20 <_lseek_r>
 8004a90:	89a3      	ldrh	r3, [r4, #12]
 8004a92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a9a:	81a3      	strh	r3, [r4, #12]
 8004a9c:	4632      	mov	r2, r6
 8004a9e:	463b      	mov	r3, r7
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa6:	f000 b869 	b.w	8004b7c <_write_r>

08004aaa <__sseek>:
 8004aaa:	b510      	push	{r4, lr}
 8004aac:	460c      	mov	r4, r1
 8004aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab2:	f000 f9b5 	bl	8004e20 <_lseek_r>
 8004ab6:	1c43      	adds	r3, r0, #1
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	bf15      	itete	ne
 8004abc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004abe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ac2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ac6:	81a3      	strheq	r3, [r4, #12]
 8004ac8:	bf18      	it	ne
 8004aca:	81a3      	strhne	r3, [r4, #12]
 8004acc:	bd10      	pop	{r4, pc}

08004ace <__sclose>:
 8004ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ad2:	f000 b8d3 	b.w	8004c7c <_close_r>
	...

08004ad8 <__swbuf_r>:
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ada:	460e      	mov	r6, r1
 8004adc:	4614      	mov	r4, r2
 8004ade:	4605      	mov	r5, r0
 8004ae0:	b118      	cbz	r0, 8004aea <__swbuf_r+0x12>
 8004ae2:	6983      	ldr	r3, [r0, #24]
 8004ae4:	b90b      	cbnz	r3, 8004aea <__swbuf_r+0x12>
 8004ae6:	f7ff fb81 	bl	80041ec <__sinit>
 8004aea:	4b21      	ldr	r3, [pc, #132]	; (8004b70 <__swbuf_r+0x98>)
 8004aec:	429c      	cmp	r4, r3
 8004aee:	d12b      	bne.n	8004b48 <__swbuf_r+0x70>
 8004af0:	686c      	ldr	r4, [r5, #4]
 8004af2:	69a3      	ldr	r3, [r4, #24]
 8004af4:	60a3      	str	r3, [r4, #8]
 8004af6:	89a3      	ldrh	r3, [r4, #12]
 8004af8:	071a      	lsls	r2, r3, #28
 8004afa:	d52f      	bpl.n	8004b5c <__swbuf_r+0x84>
 8004afc:	6923      	ldr	r3, [r4, #16]
 8004afe:	b36b      	cbz	r3, 8004b5c <__swbuf_r+0x84>
 8004b00:	6923      	ldr	r3, [r4, #16]
 8004b02:	6820      	ldr	r0, [r4, #0]
 8004b04:	1ac0      	subs	r0, r0, r3
 8004b06:	6963      	ldr	r3, [r4, #20]
 8004b08:	b2f6      	uxtb	r6, r6
 8004b0a:	4283      	cmp	r3, r0
 8004b0c:	4637      	mov	r7, r6
 8004b0e:	dc04      	bgt.n	8004b1a <__swbuf_r+0x42>
 8004b10:	4621      	mov	r1, r4
 8004b12:	4628      	mov	r0, r5
 8004b14:	f000 f948 	bl	8004da8 <_fflush_r>
 8004b18:	bb30      	cbnz	r0, 8004b68 <__swbuf_r+0x90>
 8004b1a:	68a3      	ldr	r3, [r4, #8]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	60a3      	str	r3, [r4, #8]
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	6022      	str	r2, [r4, #0]
 8004b26:	701e      	strb	r6, [r3, #0]
 8004b28:	6963      	ldr	r3, [r4, #20]
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	4283      	cmp	r3, r0
 8004b2e:	d004      	beq.n	8004b3a <__swbuf_r+0x62>
 8004b30:	89a3      	ldrh	r3, [r4, #12]
 8004b32:	07db      	lsls	r3, r3, #31
 8004b34:	d506      	bpl.n	8004b44 <__swbuf_r+0x6c>
 8004b36:	2e0a      	cmp	r6, #10
 8004b38:	d104      	bne.n	8004b44 <__swbuf_r+0x6c>
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	f000 f933 	bl	8004da8 <_fflush_r>
 8004b42:	b988      	cbnz	r0, 8004b68 <__swbuf_r+0x90>
 8004b44:	4638      	mov	r0, r7
 8004b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b48:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <__swbuf_r+0x9c>)
 8004b4a:	429c      	cmp	r4, r3
 8004b4c:	d101      	bne.n	8004b52 <__swbuf_r+0x7a>
 8004b4e:	68ac      	ldr	r4, [r5, #8]
 8004b50:	e7cf      	b.n	8004af2 <__swbuf_r+0x1a>
 8004b52:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <__swbuf_r+0xa0>)
 8004b54:	429c      	cmp	r4, r3
 8004b56:	bf08      	it	eq
 8004b58:	68ec      	ldreq	r4, [r5, #12]
 8004b5a:	e7ca      	b.n	8004af2 <__swbuf_r+0x1a>
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	4628      	mov	r0, r5
 8004b60:	f000 f81e 	bl	8004ba0 <__swsetup_r>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d0cb      	beq.n	8004b00 <__swbuf_r+0x28>
 8004b68:	f04f 37ff 	mov.w	r7, #4294967295
 8004b6c:	e7ea      	b.n	8004b44 <__swbuf_r+0x6c>
 8004b6e:	bf00      	nop
 8004b70:	080050a4 	.word	0x080050a4
 8004b74:	080050c4 	.word	0x080050c4
 8004b78:	08005084 	.word	0x08005084

08004b7c <_write_r>:
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	4d07      	ldr	r5, [pc, #28]	; (8004b9c <_write_r+0x20>)
 8004b80:	4604      	mov	r4, r0
 8004b82:	4608      	mov	r0, r1
 8004b84:	4611      	mov	r1, r2
 8004b86:	2200      	movs	r2, #0
 8004b88:	602a      	str	r2, [r5, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f7fc fa9f 	bl	80010ce <_write>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	d102      	bne.n	8004b9a <_write_r+0x1e>
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	b103      	cbz	r3, 8004b9a <_write_r+0x1e>
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
 8004b9c:	200001fc 	.word	0x200001fc

08004ba0 <__swsetup_r>:
 8004ba0:	4b32      	ldr	r3, [pc, #200]	; (8004c6c <__swsetup_r+0xcc>)
 8004ba2:	b570      	push	{r4, r5, r6, lr}
 8004ba4:	681d      	ldr	r5, [r3, #0]
 8004ba6:	4606      	mov	r6, r0
 8004ba8:	460c      	mov	r4, r1
 8004baa:	b125      	cbz	r5, 8004bb6 <__swsetup_r+0x16>
 8004bac:	69ab      	ldr	r3, [r5, #24]
 8004bae:	b913      	cbnz	r3, 8004bb6 <__swsetup_r+0x16>
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	f7ff fb1b 	bl	80041ec <__sinit>
 8004bb6:	4b2e      	ldr	r3, [pc, #184]	; (8004c70 <__swsetup_r+0xd0>)
 8004bb8:	429c      	cmp	r4, r3
 8004bba:	d10f      	bne.n	8004bdc <__swsetup_r+0x3c>
 8004bbc:	686c      	ldr	r4, [r5, #4]
 8004bbe:	89a3      	ldrh	r3, [r4, #12]
 8004bc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bc4:	0719      	lsls	r1, r3, #28
 8004bc6:	d42c      	bmi.n	8004c22 <__swsetup_r+0x82>
 8004bc8:	06dd      	lsls	r5, r3, #27
 8004bca:	d411      	bmi.n	8004bf0 <__swsetup_r+0x50>
 8004bcc:	2309      	movs	r3, #9
 8004bce:	6033      	str	r3, [r6, #0]
 8004bd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004bd4:	81a3      	strh	r3, [r4, #12]
 8004bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bda:	e03e      	b.n	8004c5a <__swsetup_r+0xba>
 8004bdc:	4b25      	ldr	r3, [pc, #148]	; (8004c74 <__swsetup_r+0xd4>)
 8004bde:	429c      	cmp	r4, r3
 8004be0:	d101      	bne.n	8004be6 <__swsetup_r+0x46>
 8004be2:	68ac      	ldr	r4, [r5, #8]
 8004be4:	e7eb      	b.n	8004bbe <__swsetup_r+0x1e>
 8004be6:	4b24      	ldr	r3, [pc, #144]	; (8004c78 <__swsetup_r+0xd8>)
 8004be8:	429c      	cmp	r4, r3
 8004bea:	bf08      	it	eq
 8004bec:	68ec      	ldreq	r4, [r5, #12]
 8004bee:	e7e6      	b.n	8004bbe <__swsetup_r+0x1e>
 8004bf0:	0758      	lsls	r0, r3, #29
 8004bf2:	d512      	bpl.n	8004c1a <__swsetup_r+0x7a>
 8004bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bf6:	b141      	cbz	r1, 8004c0a <__swsetup_r+0x6a>
 8004bf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bfc:	4299      	cmp	r1, r3
 8004bfe:	d002      	beq.n	8004c06 <__swsetup_r+0x66>
 8004c00:	4630      	mov	r0, r6
 8004c02:	f000 f991 	bl	8004f28 <_free_r>
 8004c06:	2300      	movs	r3, #0
 8004c08:	6363      	str	r3, [r4, #52]	; 0x34
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c10:	81a3      	strh	r3, [r4, #12]
 8004c12:	2300      	movs	r3, #0
 8004c14:	6063      	str	r3, [r4, #4]
 8004c16:	6923      	ldr	r3, [r4, #16]
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	89a3      	ldrh	r3, [r4, #12]
 8004c1c:	f043 0308 	orr.w	r3, r3, #8
 8004c20:	81a3      	strh	r3, [r4, #12]
 8004c22:	6923      	ldr	r3, [r4, #16]
 8004c24:	b94b      	cbnz	r3, 8004c3a <__swsetup_r+0x9a>
 8004c26:	89a3      	ldrh	r3, [r4, #12]
 8004c28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c30:	d003      	beq.n	8004c3a <__swsetup_r+0x9a>
 8004c32:	4621      	mov	r1, r4
 8004c34:	4630      	mov	r0, r6
 8004c36:	f000 f92b 	bl	8004e90 <__smakebuf_r>
 8004c3a:	89a0      	ldrh	r0, [r4, #12]
 8004c3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c40:	f010 0301 	ands.w	r3, r0, #1
 8004c44:	d00a      	beq.n	8004c5c <__swsetup_r+0xbc>
 8004c46:	2300      	movs	r3, #0
 8004c48:	60a3      	str	r3, [r4, #8]
 8004c4a:	6963      	ldr	r3, [r4, #20]
 8004c4c:	425b      	negs	r3, r3
 8004c4e:	61a3      	str	r3, [r4, #24]
 8004c50:	6923      	ldr	r3, [r4, #16]
 8004c52:	b943      	cbnz	r3, 8004c66 <__swsetup_r+0xc6>
 8004c54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c58:	d1ba      	bne.n	8004bd0 <__swsetup_r+0x30>
 8004c5a:	bd70      	pop	{r4, r5, r6, pc}
 8004c5c:	0781      	lsls	r1, r0, #30
 8004c5e:	bf58      	it	pl
 8004c60:	6963      	ldrpl	r3, [r4, #20]
 8004c62:	60a3      	str	r3, [r4, #8]
 8004c64:	e7f4      	b.n	8004c50 <__swsetup_r+0xb0>
 8004c66:	2000      	movs	r0, #0
 8004c68:	e7f7      	b.n	8004c5a <__swsetup_r+0xba>
 8004c6a:	bf00      	nop
 8004c6c:	2000001c 	.word	0x2000001c
 8004c70:	080050a4 	.word	0x080050a4
 8004c74:	080050c4 	.word	0x080050c4
 8004c78:	08005084 	.word	0x08005084

08004c7c <_close_r>:
 8004c7c:	b538      	push	{r3, r4, r5, lr}
 8004c7e:	4d06      	ldr	r5, [pc, #24]	; (8004c98 <_close_r+0x1c>)
 8004c80:	2300      	movs	r3, #0
 8004c82:	4604      	mov	r4, r0
 8004c84:	4608      	mov	r0, r1
 8004c86:	602b      	str	r3, [r5, #0]
 8004c88:	f7fc fa3d 	bl	8001106 <_close>
 8004c8c:	1c43      	adds	r3, r0, #1
 8004c8e:	d102      	bne.n	8004c96 <_close_r+0x1a>
 8004c90:	682b      	ldr	r3, [r5, #0]
 8004c92:	b103      	cbz	r3, 8004c96 <_close_r+0x1a>
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	bd38      	pop	{r3, r4, r5, pc}
 8004c98:	200001fc 	.word	0x200001fc

08004c9c <__sflush_r>:
 8004c9c:	898a      	ldrh	r2, [r1, #12]
 8004c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca2:	4605      	mov	r5, r0
 8004ca4:	0710      	lsls	r0, r2, #28
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	d458      	bmi.n	8004d5c <__sflush_r+0xc0>
 8004caa:	684b      	ldr	r3, [r1, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	dc05      	bgt.n	8004cbc <__sflush_r+0x20>
 8004cb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	dc02      	bgt.n	8004cbc <__sflush_r+0x20>
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cbe:	2e00      	cmp	r6, #0
 8004cc0:	d0f9      	beq.n	8004cb6 <__sflush_r+0x1a>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004cc8:	682f      	ldr	r7, [r5, #0]
 8004cca:	602b      	str	r3, [r5, #0]
 8004ccc:	d032      	beq.n	8004d34 <__sflush_r+0x98>
 8004cce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cd0:	89a3      	ldrh	r3, [r4, #12]
 8004cd2:	075a      	lsls	r2, r3, #29
 8004cd4:	d505      	bpl.n	8004ce2 <__sflush_r+0x46>
 8004cd6:	6863      	ldr	r3, [r4, #4]
 8004cd8:	1ac0      	subs	r0, r0, r3
 8004cda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cdc:	b10b      	cbz	r3, 8004ce2 <__sflush_r+0x46>
 8004cde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ce0:	1ac0      	subs	r0, r0, r3
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ce8:	6a21      	ldr	r1, [r4, #32]
 8004cea:	4628      	mov	r0, r5
 8004cec:	47b0      	blx	r6
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	d106      	bne.n	8004d02 <__sflush_r+0x66>
 8004cf4:	6829      	ldr	r1, [r5, #0]
 8004cf6:	291d      	cmp	r1, #29
 8004cf8:	d82c      	bhi.n	8004d54 <__sflush_r+0xb8>
 8004cfa:	4a2a      	ldr	r2, [pc, #168]	; (8004da4 <__sflush_r+0x108>)
 8004cfc:	40ca      	lsrs	r2, r1
 8004cfe:	07d6      	lsls	r6, r2, #31
 8004d00:	d528      	bpl.n	8004d54 <__sflush_r+0xb8>
 8004d02:	2200      	movs	r2, #0
 8004d04:	6062      	str	r2, [r4, #4]
 8004d06:	04d9      	lsls	r1, r3, #19
 8004d08:	6922      	ldr	r2, [r4, #16]
 8004d0a:	6022      	str	r2, [r4, #0]
 8004d0c:	d504      	bpl.n	8004d18 <__sflush_r+0x7c>
 8004d0e:	1c42      	adds	r2, r0, #1
 8004d10:	d101      	bne.n	8004d16 <__sflush_r+0x7a>
 8004d12:	682b      	ldr	r3, [r5, #0]
 8004d14:	b903      	cbnz	r3, 8004d18 <__sflush_r+0x7c>
 8004d16:	6560      	str	r0, [r4, #84]	; 0x54
 8004d18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d1a:	602f      	str	r7, [r5, #0]
 8004d1c:	2900      	cmp	r1, #0
 8004d1e:	d0ca      	beq.n	8004cb6 <__sflush_r+0x1a>
 8004d20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d24:	4299      	cmp	r1, r3
 8004d26:	d002      	beq.n	8004d2e <__sflush_r+0x92>
 8004d28:	4628      	mov	r0, r5
 8004d2a:	f000 f8fd 	bl	8004f28 <_free_r>
 8004d2e:	2000      	movs	r0, #0
 8004d30:	6360      	str	r0, [r4, #52]	; 0x34
 8004d32:	e7c1      	b.n	8004cb8 <__sflush_r+0x1c>
 8004d34:	6a21      	ldr	r1, [r4, #32]
 8004d36:	2301      	movs	r3, #1
 8004d38:	4628      	mov	r0, r5
 8004d3a:	47b0      	blx	r6
 8004d3c:	1c41      	adds	r1, r0, #1
 8004d3e:	d1c7      	bne.n	8004cd0 <__sflush_r+0x34>
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0c4      	beq.n	8004cd0 <__sflush_r+0x34>
 8004d46:	2b1d      	cmp	r3, #29
 8004d48:	d001      	beq.n	8004d4e <__sflush_r+0xb2>
 8004d4a:	2b16      	cmp	r3, #22
 8004d4c:	d101      	bne.n	8004d52 <__sflush_r+0xb6>
 8004d4e:	602f      	str	r7, [r5, #0]
 8004d50:	e7b1      	b.n	8004cb6 <__sflush_r+0x1a>
 8004d52:	89a3      	ldrh	r3, [r4, #12]
 8004d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d58:	81a3      	strh	r3, [r4, #12]
 8004d5a:	e7ad      	b.n	8004cb8 <__sflush_r+0x1c>
 8004d5c:	690f      	ldr	r7, [r1, #16]
 8004d5e:	2f00      	cmp	r7, #0
 8004d60:	d0a9      	beq.n	8004cb6 <__sflush_r+0x1a>
 8004d62:	0793      	lsls	r3, r2, #30
 8004d64:	680e      	ldr	r6, [r1, #0]
 8004d66:	bf08      	it	eq
 8004d68:	694b      	ldreq	r3, [r1, #20]
 8004d6a:	600f      	str	r7, [r1, #0]
 8004d6c:	bf18      	it	ne
 8004d6e:	2300      	movne	r3, #0
 8004d70:	eba6 0807 	sub.w	r8, r6, r7
 8004d74:	608b      	str	r3, [r1, #8]
 8004d76:	f1b8 0f00 	cmp.w	r8, #0
 8004d7a:	dd9c      	ble.n	8004cb6 <__sflush_r+0x1a>
 8004d7c:	6a21      	ldr	r1, [r4, #32]
 8004d7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d80:	4643      	mov	r3, r8
 8004d82:	463a      	mov	r2, r7
 8004d84:	4628      	mov	r0, r5
 8004d86:	47b0      	blx	r6
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	dc06      	bgt.n	8004d9a <__sflush_r+0xfe>
 8004d8c:	89a3      	ldrh	r3, [r4, #12]
 8004d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d92:	81a3      	strh	r3, [r4, #12]
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295
 8004d98:	e78e      	b.n	8004cb8 <__sflush_r+0x1c>
 8004d9a:	4407      	add	r7, r0
 8004d9c:	eba8 0800 	sub.w	r8, r8, r0
 8004da0:	e7e9      	b.n	8004d76 <__sflush_r+0xda>
 8004da2:	bf00      	nop
 8004da4:	20400001 	.word	0x20400001

08004da8 <_fflush_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	690b      	ldr	r3, [r1, #16]
 8004dac:	4605      	mov	r5, r0
 8004dae:	460c      	mov	r4, r1
 8004db0:	b913      	cbnz	r3, 8004db8 <_fflush_r+0x10>
 8004db2:	2500      	movs	r5, #0
 8004db4:	4628      	mov	r0, r5
 8004db6:	bd38      	pop	{r3, r4, r5, pc}
 8004db8:	b118      	cbz	r0, 8004dc2 <_fflush_r+0x1a>
 8004dba:	6983      	ldr	r3, [r0, #24]
 8004dbc:	b90b      	cbnz	r3, 8004dc2 <_fflush_r+0x1a>
 8004dbe:	f7ff fa15 	bl	80041ec <__sinit>
 8004dc2:	4b14      	ldr	r3, [pc, #80]	; (8004e14 <_fflush_r+0x6c>)
 8004dc4:	429c      	cmp	r4, r3
 8004dc6:	d11b      	bne.n	8004e00 <_fflush_r+0x58>
 8004dc8:	686c      	ldr	r4, [r5, #4]
 8004dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0ef      	beq.n	8004db2 <_fflush_r+0xa>
 8004dd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004dd4:	07d0      	lsls	r0, r2, #31
 8004dd6:	d404      	bmi.n	8004de2 <_fflush_r+0x3a>
 8004dd8:	0599      	lsls	r1, r3, #22
 8004dda:	d402      	bmi.n	8004de2 <_fflush_r+0x3a>
 8004ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dde:	f7ff faa3 	bl	8004328 <__retarget_lock_acquire_recursive>
 8004de2:	4628      	mov	r0, r5
 8004de4:	4621      	mov	r1, r4
 8004de6:	f7ff ff59 	bl	8004c9c <__sflush_r>
 8004dea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dec:	07da      	lsls	r2, r3, #31
 8004dee:	4605      	mov	r5, r0
 8004df0:	d4e0      	bmi.n	8004db4 <_fflush_r+0xc>
 8004df2:	89a3      	ldrh	r3, [r4, #12]
 8004df4:	059b      	lsls	r3, r3, #22
 8004df6:	d4dd      	bmi.n	8004db4 <_fflush_r+0xc>
 8004df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dfa:	f7ff fa96 	bl	800432a <__retarget_lock_release_recursive>
 8004dfe:	e7d9      	b.n	8004db4 <_fflush_r+0xc>
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <_fflush_r+0x70>)
 8004e02:	429c      	cmp	r4, r3
 8004e04:	d101      	bne.n	8004e0a <_fflush_r+0x62>
 8004e06:	68ac      	ldr	r4, [r5, #8]
 8004e08:	e7df      	b.n	8004dca <_fflush_r+0x22>
 8004e0a:	4b04      	ldr	r3, [pc, #16]	; (8004e1c <_fflush_r+0x74>)
 8004e0c:	429c      	cmp	r4, r3
 8004e0e:	bf08      	it	eq
 8004e10:	68ec      	ldreq	r4, [r5, #12]
 8004e12:	e7da      	b.n	8004dca <_fflush_r+0x22>
 8004e14:	080050a4 	.word	0x080050a4
 8004e18:	080050c4 	.word	0x080050c4
 8004e1c:	08005084 	.word	0x08005084

08004e20 <_lseek_r>:
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	4d07      	ldr	r5, [pc, #28]	; (8004e40 <_lseek_r+0x20>)
 8004e24:	4604      	mov	r4, r0
 8004e26:	4608      	mov	r0, r1
 8004e28:	4611      	mov	r1, r2
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	602a      	str	r2, [r5, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f7fc f990 	bl	8001154 <_lseek>
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	d102      	bne.n	8004e3e <_lseek_r+0x1e>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	b103      	cbz	r3, 8004e3e <_lseek_r+0x1e>
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	bd38      	pop	{r3, r4, r5, pc}
 8004e40:	200001fc 	.word	0x200001fc

08004e44 <__swhatbuf_r>:
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	460e      	mov	r6, r1
 8004e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e4c:	2900      	cmp	r1, #0
 8004e4e:	b096      	sub	sp, #88	; 0x58
 8004e50:	4614      	mov	r4, r2
 8004e52:	461d      	mov	r5, r3
 8004e54:	da08      	bge.n	8004e68 <__swhatbuf_r+0x24>
 8004e56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	602a      	str	r2, [r5, #0]
 8004e5e:	061a      	lsls	r2, r3, #24
 8004e60:	d410      	bmi.n	8004e84 <__swhatbuf_r+0x40>
 8004e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e66:	e00e      	b.n	8004e86 <__swhatbuf_r+0x42>
 8004e68:	466a      	mov	r2, sp
 8004e6a:	f000 f8bb 	bl	8004fe4 <_fstat_r>
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	dbf1      	blt.n	8004e56 <__swhatbuf_r+0x12>
 8004e72:	9a01      	ldr	r2, [sp, #4]
 8004e74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e7c:	425a      	negs	r2, r3
 8004e7e:	415a      	adcs	r2, r3
 8004e80:	602a      	str	r2, [r5, #0]
 8004e82:	e7ee      	b.n	8004e62 <__swhatbuf_r+0x1e>
 8004e84:	2340      	movs	r3, #64	; 0x40
 8004e86:	2000      	movs	r0, #0
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	b016      	add	sp, #88	; 0x58
 8004e8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004e90 <__smakebuf_r>:
 8004e90:	898b      	ldrh	r3, [r1, #12]
 8004e92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e94:	079d      	lsls	r5, r3, #30
 8004e96:	4606      	mov	r6, r0
 8004e98:	460c      	mov	r4, r1
 8004e9a:	d507      	bpl.n	8004eac <__smakebuf_r+0x1c>
 8004e9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ea0:	6023      	str	r3, [r4, #0]
 8004ea2:	6123      	str	r3, [r4, #16]
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	6163      	str	r3, [r4, #20]
 8004ea8:	b002      	add	sp, #8
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}
 8004eac:	ab01      	add	r3, sp, #4
 8004eae:	466a      	mov	r2, sp
 8004eb0:	f7ff ffc8 	bl	8004e44 <__swhatbuf_r>
 8004eb4:	9900      	ldr	r1, [sp, #0]
 8004eb6:	4605      	mov	r5, r0
 8004eb8:	4630      	mov	r0, r6
 8004eba:	f7ff fa57 	bl	800436c <_malloc_r>
 8004ebe:	b948      	cbnz	r0, 8004ed4 <__smakebuf_r+0x44>
 8004ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ec4:	059a      	lsls	r2, r3, #22
 8004ec6:	d4ef      	bmi.n	8004ea8 <__smakebuf_r+0x18>
 8004ec8:	f023 0303 	bic.w	r3, r3, #3
 8004ecc:	f043 0302 	orr.w	r3, r3, #2
 8004ed0:	81a3      	strh	r3, [r4, #12]
 8004ed2:	e7e3      	b.n	8004e9c <__smakebuf_r+0xc>
 8004ed4:	4b0d      	ldr	r3, [pc, #52]	; (8004f0c <__smakebuf_r+0x7c>)
 8004ed6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ed8:	89a3      	ldrh	r3, [r4, #12]
 8004eda:	6020      	str	r0, [r4, #0]
 8004edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee0:	81a3      	strh	r3, [r4, #12]
 8004ee2:	9b00      	ldr	r3, [sp, #0]
 8004ee4:	6163      	str	r3, [r4, #20]
 8004ee6:	9b01      	ldr	r3, [sp, #4]
 8004ee8:	6120      	str	r0, [r4, #16]
 8004eea:	b15b      	cbz	r3, 8004f04 <__smakebuf_r+0x74>
 8004eec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	f000 f889 	bl	8005008 <_isatty_r>
 8004ef6:	b128      	cbz	r0, 8004f04 <__smakebuf_r+0x74>
 8004ef8:	89a3      	ldrh	r3, [r4, #12]
 8004efa:	f023 0303 	bic.w	r3, r3, #3
 8004efe:	f043 0301 	orr.w	r3, r3, #1
 8004f02:	81a3      	strh	r3, [r4, #12]
 8004f04:	89a0      	ldrh	r0, [r4, #12]
 8004f06:	4305      	orrs	r5, r0
 8004f08:	81a5      	strh	r5, [r4, #12]
 8004f0a:	e7cd      	b.n	8004ea8 <__smakebuf_r+0x18>
 8004f0c:	08004185 	.word	0x08004185

08004f10 <__malloc_lock>:
 8004f10:	4801      	ldr	r0, [pc, #4]	; (8004f18 <__malloc_lock+0x8>)
 8004f12:	f7ff ba09 	b.w	8004328 <__retarget_lock_acquire_recursive>
 8004f16:	bf00      	nop
 8004f18:	200001f0 	.word	0x200001f0

08004f1c <__malloc_unlock>:
 8004f1c:	4801      	ldr	r0, [pc, #4]	; (8004f24 <__malloc_unlock+0x8>)
 8004f1e:	f7ff ba04 	b.w	800432a <__retarget_lock_release_recursive>
 8004f22:	bf00      	nop
 8004f24:	200001f0 	.word	0x200001f0

08004f28 <_free_r>:
 8004f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f2a:	2900      	cmp	r1, #0
 8004f2c:	d044      	beq.n	8004fb8 <_free_r+0x90>
 8004f2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f32:	9001      	str	r0, [sp, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f1a1 0404 	sub.w	r4, r1, #4
 8004f3a:	bfb8      	it	lt
 8004f3c:	18e4      	addlt	r4, r4, r3
 8004f3e:	f7ff ffe7 	bl	8004f10 <__malloc_lock>
 8004f42:	4a1e      	ldr	r2, [pc, #120]	; (8004fbc <_free_r+0x94>)
 8004f44:	9801      	ldr	r0, [sp, #4]
 8004f46:	6813      	ldr	r3, [r2, #0]
 8004f48:	b933      	cbnz	r3, 8004f58 <_free_r+0x30>
 8004f4a:	6063      	str	r3, [r4, #4]
 8004f4c:	6014      	str	r4, [r2, #0]
 8004f4e:	b003      	add	sp, #12
 8004f50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f54:	f7ff bfe2 	b.w	8004f1c <__malloc_unlock>
 8004f58:	42a3      	cmp	r3, r4
 8004f5a:	d908      	bls.n	8004f6e <_free_r+0x46>
 8004f5c:	6825      	ldr	r5, [r4, #0]
 8004f5e:	1961      	adds	r1, r4, r5
 8004f60:	428b      	cmp	r3, r1
 8004f62:	bf01      	itttt	eq
 8004f64:	6819      	ldreq	r1, [r3, #0]
 8004f66:	685b      	ldreq	r3, [r3, #4]
 8004f68:	1949      	addeq	r1, r1, r5
 8004f6a:	6021      	streq	r1, [r4, #0]
 8004f6c:	e7ed      	b.n	8004f4a <_free_r+0x22>
 8004f6e:	461a      	mov	r2, r3
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	b10b      	cbz	r3, 8004f78 <_free_r+0x50>
 8004f74:	42a3      	cmp	r3, r4
 8004f76:	d9fa      	bls.n	8004f6e <_free_r+0x46>
 8004f78:	6811      	ldr	r1, [r2, #0]
 8004f7a:	1855      	adds	r5, r2, r1
 8004f7c:	42a5      	cmp	r5, r4
 8004f7e:	d10b      	bne.n	8004f98 <_free_r+0x70>
 8004f80:	6824      	ldr	r4, [r4, #0]
 8004f82:	4421      	add	r1, r4
 8004f84:	1854      	adds	r4, r2, r1
 8004f86:	42a3      	cmp	r3, r4
 8004f88:	6011      	str	r1, [r2, #0]
 8004f8a:	d1e0      	bne.n	8004f4e <_free_r+0x26>
 8004f8c:	681c      	ldr	r4, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	6053      	str	r3, [r2, #4]
 8004f92:	4421      	add	r1, r4
 8004f94:	6011      	str	r1, [r2, #0]
 8004f96:	e7da      	b.n	8004f4e <_free_r+0x26>
 8004f98:	d902      	bls.n	8004fa0 <_free_r+0x78>
 8004f9a:	230c      	movs	r3, #12
 8004f9c:	6003      	str	r3, [r0, #0]
 8004f9e:	e7d6      	b.n	8004f4e <_free_r+0x26>
 8004fa0:	6825      	ldr	r5, [r4, #0]
 8004fa2:	1961      	adds	r1, r4, r5
 8004fa4:	428b      	cmp	r3, r1
 8004fa6:	bf04      	itt	eq
 8004fa8:	6819      	ldreq	r1, [r3, #0]
 8004faa:	685b      	ldreq	r3, [r3, #4]
 8004fac:	6063      	str	r3, [r4, #4]
 8004fae:	bf04      	itt	eq
 8004fb0:	1949      	addeq	r1, r1, r5
 8004fb2:	6021      	streq	r1, [r4, #0]
 8004fb4:	6054      	str	r4, [r2, #4]
 8004fb6:	e7ca      	b.n	8004f4e <_free_r+0x26>
 8004fb8:	b003      	add	sp, #12
 8004fba:	bd30      	pop	{r4, r5, pc}
 8004fbc:	200001f4 	.word	0x200001f4

08004fc0 <_read_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	4d07      	ldr	r5, [pc, #28]	; (8004fe0 <_read_r+0x20>)
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	4608      	mov	r0, r1
 8004fc8:	4611      	mov	r1, r2
 8004fca:	2200      	movs	r2, #0
 8004fcc:	602a      	str	r2, [r5, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f7fc f860 	bl	8001094 <_read>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d102      	bne.n	8004fde <_read_r+0x1e>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	b103      	cbz	r3, 8004fde <_read_r+0x1e>
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	200001fc 	.word	0x200001fc

08004fe4 <_fstat_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	4d07      	ldr	r5, [pc, #28]	; (8005004 <_fstat_r+0x20>)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	4604      	mov	r4, r0
 8004fec:	4608      	mov	r0, r1
 8004fee:	4611      	mov	r1, r2
 8004ff0:	602b      	str	r3, [r5, #0]
 8004ff2:	f7fc f894 	bl	800111e <_fstat>
 8004ff6:	1c43      	adds	r3, r0, #1
 8004ff8:	d102      	bne.n	8005000 <_fstat_r+0x1c>
 8004ffa:	682b      	ldr	r3, [r5, #0]
 8004ffc:	b103      	cbz	r3, 8005000 <_fstat_r+0x1c>
 8004ffe:	6023      	str	r3, [r4, #0]
 8005000:	bd38      	pop	{r3, r4, r5, pc}
 8005002:	bf00      	nop
 8005004:	200001fc 	.word	0x200001fc

08005008 <_isatty_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	4d06      	ldr	r5, [pc, #24]	; (8005024 <_isatty_r+0x1c>)
 800500c:	2300      	movs	r3, #0
 800500e:	4604      	mov	r4, r0
 8005010:	4608      	mov	r0, r1
 8005012:	602b      	str	r3, [r5, #0]
 8005014:	f7fc f893 	bl	800113e <_isatty>
 8005018:	1c43      	adds	r3, r0, #1
 800501a:	d102      	bne.n	8005022 <_isatty_r+0x1a>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	b103      	cbz	r3, 8005022 <_isatty_r+0x1a>
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	bd38      	pop	{r3, r4, r5, pc}
 8005024:	200001fc 	.word	0x200001fc

08005028 <_init>:
 8005028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502a:	bf00      	nop
 800502c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502e:	bc08      	pop	{r3}
 8005030:	469e      	mov	lr, r3
 8005032:	4770      	bx	lr

08005034 <_fini>:
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	bf00      	nop
 8005038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503a:	bc08      	pop	{r3}
 800503c:	469e      	mov	lr, r3
 800503e:	4770      	bx	lr
